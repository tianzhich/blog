{"version":3,"sources":["webpack:///path---learning-2018-09-03-master-the-fed-interviews-algorithms-4098da4b0ec93076eba4.js","webpack:///./.cache/json/learning-2018-09-03-master-the-fed-interviews-algorithms.json"],"names":["webpackJsonp","281","module","exports","data","markdownRemark","html","frontmatter","title","date","excerpt","contents","text","subContents","pathContext","slug"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA;AAAkm0IC,aAAmDC,MAAA,aAAAC,KAAA,qBAAAC,QAAA,8FAAAC,WAAsKC,KAAA,KAAAC,YAAA,OAAiCD,KAAA,SAAAC,cAAgCD,KAAA,WAAkBA,KAAA,WAAkBA,KAAA,oBAA2BA,KAAA,WAAkBA,KAAA,WAAkBA,KAAA,aAAoBA,KAAA,QAAAC,YAAA,UAAsCC,aAAgBC,KAAA","file":"path---learning-2018-09-03-master-the-fed-interviews-algorithms-4098da4b0ec93076eba4.js","sourcesContent":["webpackJsonp([147766044081179],{\n\n/***/ 281:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2 id=\\\"前言\\\"><a href=\\\"#%E5%89%8D%E8%A8%80\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>前言</h2>\\n<p>秋招提前批已经基本结束了，即将进入金九银十，正式的号角已经打响。春招，以及秋招提前批一路过来，断断续续也面了一些公司，自己在笔记上也有总结，甚至自己进行过一些猜题。发现基本问到的问题八九不离十，但是有些知识，特别是偏工程的知识点，如果没遇到过，很难产生深刻的印象。结合自己之前的笔记，也想在正式进入9月之前，整理一个面试题集系列，加深理解</p>\\n<p>这是这个系列的第三篇，关于算法</p>\\n<p>前端开发者的算法知识是一直被诟病的一点，因为前端开发并不需要掌握太多算法知识。其实很多开发都不需要太多的算法知识，所以这里总结的也是一些基础的算法，或者被问过，或者我觉得挺有意思需要掌握。高阶一点的算法，如果我研究过，也觉得有意思，会发表在算法的大分类下</p>\\n<p>现在各领域更新换代很快，很多工作并不需要太多思考。高中以来这么久，虽然学到的知识多了，但自我感觉自己的逻辑思维并没有得到太大的提高。算法其实算是工作之余额外的调剂，动动脑，思考思考，挺好</p>\\n<p>这一领域难免有很多疏漏的地方，因为自己也是算法菜鸟，欢迎指正</p>\\n<h2 id=\\\"一、排序算法\\\"><a href=\\\"#%E4%B8%80%E3%80%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>一、排序算法</h2>\\n<p>排序算法可以说是被考到最多的算法系列了，结合着之前自己学习数据结构课程的笔记，以及看过<a href=\\\"https://www.icourse163.org/course/ZJU-93001\\\">浙大的数据结构课程</a> (推荐有时间的一定要去看看，因为讲的真的太棒了)，下面给出一些排序算法的伪码或者是自己写的JavaScript版本</p>\\n<h3 id=\\\"1-选择排序\\\"><a href=\\\"#1-%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>1. 选择排序</h3>\\n<p>选择排序可以说是最好理解的排序了，就是每次从未排数组里找到一个最小的数与数组第一个数做交换即可</p>\\n<h4 id=\\\"时空复杂度分析\\\"><a href=\\\"#%E6%97%B6%E7%A9%BA%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>时空复杂度分析</h4>\\n<ul>\\n<li>额外空间复杂度：<strong><span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">O(1)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:0.75em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span></span></span></span></strong>。因为只需要一个临时变量存最小的数</li>\\n<li>\\n<p>时间复杂度：<strong><span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>N</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">O(N^{2})</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:0.8141079999999999em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:1.064108em;vertical-align:-0.25em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141079999999999em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span></span></span></span></span></span><span class=\\\"mclose\\\">)</span></span></span></span></strong></p>\\n<ul>\\n<li>比较复杂度：<strong><span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>N</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">O(N^{2})</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:0.8141079999999999em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:1.064108em;vertical-align:-0.25em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141079999999999em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span></span></span></span></span></span><span class=\\\"mclose\\\">)</span></span></span></span></strong>。第一次需要(n-1)次比较…第N次需要0次比较，一共<strong><span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mfrac><mrow><mi>N</mi><mo>×</mo><mo>(</mo><mi>N</mi><mo>−</mo><mn>1</mn><mo>)</mo></mrow><mrow><mn>2</mn></mrow></mfrac></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\frac{N\\\\times (N-1)}{2}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:1.01em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:1.355em;vertical-align:-0.345em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord\\\"><span class=\\\"mopen nulldelimiter\\\"></span><span class=\\\"mfrac\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.01em;\\\"><span style=\\\"top:-2.6550000000000002em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span><span style=\\\"top:-3.15em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"stretchy\\\" style=\\\"height:0.2em;\\\"><svg width='400em' height='0.2em' viewBox='0 0 400000 200' preserveAspectRatio='xMinYMin slice'><path d='M0 80H400000 v40H0z M0 80H400000 v40H0z'/></svg></span></span><span style=\\\"top:-3.485em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathit mtight\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mbin mtight\\\">×</span><span class=\\\"mopen mtight\\\">(</span><span class=\\\"mord mathit mtight\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mbin mtight\\\">−</span><span class=\\\"mord mtight\\\">1</span><span class=\\\"mclose mtight\\\">)</span></span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.345em;\\\"></span></span></span></span><span class=\\\"mclose nulldelimiter\\\"></span></span></span></span></span></strong>次</li>\\n<li>交换复杂度：<strong><span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>N</mi><mo>)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">O(N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:0.75em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span></strong></li>\\n<li>最坏情况：每次都需要交换，一共交换<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mi>N</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">N-1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:0.68333em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:0.76666em;vertical-align:-0.08333em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>次</li>\\n<li>最好情况：已排好序，每次无需交换，<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding=\\\"application/x-tex\\\">0</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:0.64444em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:0.64444em;vertical-align:0em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord\\\">0</span></span></span></span>次</li>\\n<li>平均情况：<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mfrac><mrow><mi>N</mi><mo>−</mo><mn>1</mn></mrow><mrow><mn>2</mn></mrow></mfrac></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\frac {N-1}{2}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:0.872331em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:1.217331em;vertical-align:-0.345em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord\\\"><span class=\\\"mopen nulldelimiter\\\"></span><span class=\\\"mfrac\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.872331em;\\\"><span style=\\\"top:-2.6550000000000002em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span><span style=\\\"top:-3.15em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"stretchy\\\" style=\\\"height:0.2em;\\\"><svg width='400em' height='0.2em' viewBox='0 0 400000 200' preserveAspectRatio='xMinYMin slice'><path d='M0 80H400000 v40H0z M0 80H400000 v40H0z'/></svg></span></span><span style=\\\"top:-3.394em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathit mtight\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mbin mtight\\\">−</span><span class=\\\"mord mtight\\\">1</span></span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.345em;\\\"></span></span></span></span><span class=\\\"mclose nulldelimiter\\\"></span></span></span></span></span>次</li>\\n</ul>\\n</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// JavaScript版本</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">selectionSort</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> arr<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">let</span> minPos <span class=\\\"token operator\\\">=</span> i<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> j <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token operator\\\">+</span> i<span class=\\\"token punctuation\\\">;</span> j <span class=\\\"token operator\\\">&lt;</span> arr<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> j<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      minPos <span class=\\\"token operator\\\">=</span> arr<span class=\\\"token punctuation\\\">[</span>minPos<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">&lt;=</span> arr<span class=\\\"token punctuation\\\">[</span>j<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">?</span> minPos <span class=\\\"token punctuation\\\">:</span> j<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token function\\\">swap</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">,</span> i<span class=\\\"token punctuation\\\">,</span> minPos<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">swap</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">,</span> a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> temp <span class=\\\"token operator\\\">=</span> arr<span class=\\\"token punctuation\\\">[</span>a<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  arr<span class=\\\"token punctuation\\\">[</span>a<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> arr<span class=\\\"token punctuation\\\">[</span>b<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  arr<span class=\\\"token punctuation\\\">[</span>b<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> temp<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h3 id=\\\"2-插入排序\\\"><a href=\\\"#2-%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>2. 插入排序</h3>\\n<p>插入排序则类似于我们玩扑克牌游戏时，抽到一张牌，从后往前比较，找到合适位置进行插入</p>\\n<h4 id=\\\"时空复杂度分析-1\\\"><a href=\\\"#%E6%97%B6%E7%A9%BA%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90-1\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>时空复杂度分析</h4>\\n<ul>\\n<li>额外空间复杂度：<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">O(1)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:0.75em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span></span></span></span>。只需要一个临时变量存当前待插入的数</li>\\n<li>\\n<p>时间复杂度：<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>N</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">O(N^2)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:0.8141079999999999em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:1.064108em;vertical-align:-0.25em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141079999999999em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span></span></span></span></span><span class=\\\"mclose\\\">)</span></span></span></span></p>\\n<ul>\\n<li>比较复杂度：<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>N</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">O(N^2)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:0.8141079999999999em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:1.064108em;vertical-align:-0.25em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141079999999999em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span></span></span></span></span><span class=\\\"mclose\\\">)</span></span></span></span></li>\\n<li>最坏情况：每次都要比较到第一个元素，第一次比较1次，第N-1次比较N-1次，一共<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mfrac><mrow><mi>N</mi><mo>×</mo><mo>(</mo><mi>N</mi><mo>−</mo><mn>1</mn><mo>)</mo></mrow><mrow><mn>2</mn></mrow></mfrac></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\frac {N\\\\times (N-1)} {2}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:1.01em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:1.355em;vertical-align:-0.345em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord\\\"><span class=\\\"mopen nulldelimiter\\\"></span><span class=\\\"mfrac\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.01em;\\\"><span style=\\\"top:-2.6550000000000002em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span><span style=\\\"top:-3.15em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"stretchy\\\" style=\\\"height:0.2em;\\\"><svg width='400em' height='0.2em' viewBox='0 0 400000 200' preserveAspectRatio='xMinYMin slice'><path d='M0 80H400000 v40H0z M0 80H400000 v40H0z'/></svg></span></span><span style=\\\"top:-3.485em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathit mtight\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mbin mtight\\\">×</span><span class=\\\"mopen mtight\\\">(</span><span class=\\\"mord mathit mtight\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mbin mtight\\\">−</span><span class=\\\"mord mtight\\\">1</span><span class=\\\"mclose mtight\\\">)</span></span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.345em;\\\"></span></span></span></span><span class=\\\"mclose nulldelimiter\\\"></span></span></span></span></span>次</li>\\n<li>最好情况：完全排好序，每次只需与前一个元素比较，一共比较<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mi>N</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">N-1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:0.68333em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:0.76666em;vertical-align:-0.08333em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>次</li>\\n<li>平均情况：每次平均比较到中间位置，一共<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mfrac><mrow><mi>N</mi><mo>×</mo><mo>(</mo><mi>N</mi><mo>−</mo><mn>1</mn><mo>)</mo></mrow><mrow><mn>4</mn></mrow></mfrac></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\frac {N\\\\times (N-1)} {4}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:1.01em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:1.355em;vertical-align:-0.345em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord\\\"><span class=\\\"mopen nulldelimiter\\\"></span><span class=\\\"mfrac\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.01em;\\\"><span style=\\\"top:-2.6550000000000002em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mtight\\\">4</span></span></span></span><span style=\\\"top:-3.15em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"stretchy\\\" style=\\\"height:0.2em;\\\"><svg width='400em' height='0.2em' viewBox='0 0 400000 200' preserveAspectRatio='xMinYMin slice'><path d='M0 80H400000 v40H0z M0 80H400000 v40H0z'/></svg></span></span><span style=\\\"top:-3.485em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathit mtight\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mbin mtight\\\">×</span><span class=\\\"mopen mtight\\\">(</span><span class=\\\"mord mathit mtight\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mbin mtight\\\">−</span><span class=\\\"mord mtight\\\">1</span><span class=\\\"mclose mtight\\\">)</span></span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.345em;\\\"></span></span></span></span><span class=\\\"mclose nulldelimiter\\\"></span></span></span></span></span>次</li>\\n<li>交换复杂度：<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>N</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">O(N^2)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:0.8141079999999999em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:1.064108em;vertical-align:-0.25em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141079999999999em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span></span></span></span></span><span class=\\\"mclose\\\">)</span></span></span></span></li>\\n<li>最坏情况：每次比较完都需要交换，一共<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mfrac><mrow><mi>N</mi><mo>×</mo><mo>(</mo><mi>N</mi><mo>−</mo><mn>1</mn><mo>)</mo></mrow><mrow><mn>2</mn></mrow></mfrac></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\frac {N\\\\times (N-1)} {2}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:1.01em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:1.355em;vertical-align:-0.345em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord\\\"><span class=\\\"mopen nulldelimiter\\\"></span><span class=\\\"mfrac\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.01em;\\\"><span style=\\\"top:-2.6550000000000002em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span><span style=\\\"top:-3.15em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"stretchy\\\" style=\\\"height:0.2em;\\\"><svg width='400em' height='0.2em' viewBox='0 0 400000 200' preserveAspectRatio='xMinYMin slice'><path d='M0 80H400000 v40H0z M0 80H400000 v40H0z'/></svg></span></span><span style=\\\"top:-3.485em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathit mtight\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mbin mtight\\\">×</span><span class=\\\"mopen mtight\\\">(</span><span class=\\\"mord mathit mtight\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mbin mtight\\\">−</span><span class=\\\"mord mtight\\\">1</span><span class=\\\"mclose mtight\\\">)</span></span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.345em;\\\"></span></span></span></span><span class=\\\"mclose nulldelimiter\\\"></span></span></span></span></span>次</li>\\n<li>最好情况：完全排好序，交换<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding=\\\"application/x-tex\\\">0</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:0.64444em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:0.64444em;vertical-align:0em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord\\\">0</span></span></span></span>次</li>\\n<li>平均情况：每次比较到中间进行交换，一共<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mfrac><mrow><mi>N</mi><mo>×</mo><mo>(</mo><mi>N</mi><mo>−</mo><mn>1</mn><mo>)</mo></mrow><mrow><mn>4</mn></mrow></mfrac></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\frac {N\\\\times (N-1)} {4}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:1.01em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:1.355em;vertical-align:-0.345em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord\\\"><span class=\\\"mopen nulldelimiter\\\"></span><span class=\\\"mfrac\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.01em;\\\"><span style=\\\"top:-2.6550000000000002em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mtight\\\">4</span></span></span></span><span style=\\\"top:-3.15em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"stretchy\\\" style=\\\"height:0.2em;\\\"><svg width='400em' height='0.2em' viewBox='0 0 400000 200' preserveAspectRatio='xMinYMin slice'><path d='M0 80H400000 v40H0z M0 80H400000 v40H0z'/></svg></span></span><span style=\\\"top:-3.485em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathit mtight\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mbin mtight\\\">×</span><span class=\\\"mopen mtight\\\">(</span><span class=\\\"mord mathit mtight\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mbin mtight\\\">−</span><span class=\\\"mord mtight\\\">1</span><span class=\\\"mclose mtight\\\">)</span></span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.345em;\\\"></span></span></span></span><span class=\\\"mclose nulldelimiter\\\"></span></span></span></span></span>次</li>\\n</ul>\\n</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">insertionSort</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> arr<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">let</span> j <span class=\\\"token operator\\\">=</span> i <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">>=</span> arr<span class=\\\"token punctuation\\\">[</span>j<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">continue</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">&lt;</span> arr<span class=\\\"token punctuation\\\">[</span>j<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      j<span class=\\\"token operator\\\">--</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>j <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">break</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">let</span> temp <span class=\\\"token operator\\\">=</span> arr<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">let</span> tempPos <span class=\\\"token operator\\\">=</span> i<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">while</span><span class=\\\"token punctuation\\\">(</span>tempPos<span class=\\\"token operator\\\">!==</span>j<span class=\\\"token operator\\\">+</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      arr<span class=\\\"token punctuation\\\">[</span>tempPos<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> arr<span class=\\\"token punctuation\\\">[</span>tempPos<span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n      tempPos<span class=\\\"token operator\\\">--</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    arr<span class=\\\"token punctuation\\\">[</span>j<span class=\\\"token operator\\\">+</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> temp<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h3 id=\\\"扩展：插入排序和选择排序的比较\\\"><a href=\\\"#%E6%89%A9%E5%B1%95%EF%BC%9A%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F%E5%92%8C%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F%E7%9A%84%E6%AF%94%E8%BE%83\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>扩展：插入排序和选择排序的比较</h3>\\n<h4 id=\\\"时间复杂度分析\\\"><a href=\\\"#%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>时间复杂度分析</h4>\\n<p>让我们再来看看插排和选排的时间复杂度，相信大多数人考虑到的都是比较复杂度作为其总体复杂度。我开始就只考虑这个，但是交换复杂度确实也是存在的，分析起来，还有那么点意思</p>\\n<h4 id=\\\"选择排序\\\"><a href=\\\"#%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>选择排序</h4>\\n<ul>\\n<li>\\n<p>时间复杂度：<strong><span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>N</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">O(N^{2})</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:0.8141079999999999em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:1.064108em;vertical-align:-0.25em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141079999999999em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span></span></span></span></span></span><span class=\\\"mclose\\\">)</span></span></span></span></strong></p>\\n<ul>\\n<li>比较复杂度：<strong><span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>N</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">O(N^{2})</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:0.8141079999999999em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:1.064108em;vertical-align:-0.25em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141079999999999em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span></span></span></span></span></span><span class=\\\"mclose\\\">)</span></span></span></span></strong>。第一次需要(n-1)次比较…第N次需要0次比较，一共<strong><span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mfrac><mrow><mi>N</mi><mo>×</mo><mo>(</mo><mi>N</mi><mo>−</mo><mn>1</mn><mo>)</mo></mrow><mrow><mn>2</mn></mrow></mfrac></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\frac{N\\\\times (N-1)}{2}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:1.01em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:1.355em;vertical-align:-0.345em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord\\\"><span class=\\\"mopen nulldelimiter\\\"></span><span class=\\\"mfrac\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.01em;\\\"><span style=\\\"top:-2.6550000000000002em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span><span style=\\\"top:-3.15em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"stretchy\\\" style=\\\"height:0.2em;\\\"><svg width='400em' height='0.2em' viewBox='0 0 400000 200' preserveAspectRatio='xMinYMin slice'><path d='M0 80H400000 v40H0z M0 80H400000 v40H0z'/></svg></span></span><span style=\\\"top:-3.485em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathit mtight\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mbin mtight\\\">×</span><span class=\\\"mopen mtight\\\">(</span><span class=\\\"mord mathit mtight\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mbin mtight\\\">−</span><span class=\\\"mord mtight\\\">1</span><span class=\\\"mclose mtight\\\">)</span></span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.345em;\\\"></span></span></span></span><span class=\\\"mclose nulldelimiter\\\"></span></span></span></span></span></strong>次</li>\\n<li>交换复杂度：<strong><span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>N</mi><mo>)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">O(N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:0.75em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span></strong></li>\\n<li>最坏情况：每次都需要交换，一共交换<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mi>N</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">N-1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:0.68333em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:0.76666em;vertical-align:-0.08333em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>次</li>\\n<li>最好情况：已排好序，每次无需交换，<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding=\\\"application/x-tex\\\">0</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:0.64444em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:0.64444em;vertical-align:0em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord\\\">0</span></span></span></span>次</li>\\n<li>平均情况：<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mfrac><mrow><mi>N</mi><mo>−</mo><mn>1</mn></mrow><mrow><mn>2</mn></mrow></mfrac></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\frac {N-1}{2}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:0.872331em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:1.217331em;vertical-align:-0.345em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord\\\"><span class=\\\"mopen nulldelimiter\\\"></span><span class=\\\"mfrac\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.872331em;\\\"><span style=\\\"top:-2.6550000000000002em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span><span style=\\\"top:-3.15em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"stretchy\\\" style=\\\"height:0.2em;\\\"><svg width='400em' height='0.2em' viewBox='0 0 400000 200' preserveAspectRatio='xMinYMin slice'><path d='M0 80H400000 v40H0z M0 80H400000 v40H0z'/></svg></span></span><span style=\\\"top:-3.394em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathit mtight\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mbin mtight\\\">−</span><span class=\\\"mord mtight\\\">1</span></span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.345em;\\\"></span></span></span></span><span class=\\\"mclose nulldelimiter\\\"></span></span></span></span></span>次</li>\\n</ul>\\n</li>\\n</ul>\\n<h4 id=\\\"插入排序\\\"><a href=\\\"#%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>插入排序</h4>\\n<ul>\\n<li>\\n<p>时间复杂度：<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>N</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">O(N^2)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:0.8141079999999999em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:1.064108em;vertical-align:-0.25em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141079999999999em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span></span></span></span></span><span class=\\\"mclose\\\">)</span></span></span></span></p>\\n<ul>\\n<li>比较复杂度：<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>N</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">O(N^2)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:0.8141079999999999em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:1.064108em;vertical-align:-0.25em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141079999999999em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span></span></span></span></span><span class=\\\"mclose\\\">)</span></span></span></span></li>\\n<li>最坏情况：每次都要比较到第一个元素，第一次比较1次，第N-1次比较N-1次，一共<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mfrac><mrow><mi>N</mi><mo>×</mo><mo>(</mo><mi>N</mi><mo>−</mo><mn>1</mn><mo>)</mo></mrow><mrow><mn>2</mn></mrow></mfrac></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\frac {N\\\\times (N-1)} {2}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:1.01em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:1.355em;vertical-align:-0.345em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord\\\"><span class=\\\"mopen nulldelimiter\\\"></span><span class=\\\"mfrac\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.01em;\\\"><span style=\\\"top:-2.6550000000000002em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span><span style=\\\"top:-3.15em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"stretchy\\\" style=\\\"height:0.2em;\\\"><svg width='400em' height='0.2em' viewBox='0 0 400000 200' preserveAspectRatio='xMinYMin slice'><path d='M0 80H400000 v40H0z M0 80H400000 v40H0z'/></svg></span></span><span style=\\\"top:-3.485em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathit mtight\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mbin mtight\\\">×</span><span class=\\\"mopen mtight\\\">(</span><span class=\\\"mord mathit mtight\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mbin mtight\\\">−</span><span class=\\\"mord mtight\\\">1</span><span class=\\\"mclose mtight\\\">)</span></span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.345em;\\\"></span></span></span></span><span class=\\\"mclose nulldelimiter\\\"></span></span></span></span></span>次</li>\\n<li>最好情况：完全排好序，每次只需与前一个元素比较，一共比较<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mi>N</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">N-1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:0.68333em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:0.76666em;vertical-align:-0.08333em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>次</li>\\n<li>平均情况：每次平均比较到中间位置，一共<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mfrac><mrow><mi>N</mi><mo>×</mo><mo>(</mo><mi>N</mi><mo>−</mo><mn>1</mn><mo>)</mo></mrow><mrow><mn>4</mn></mrow></mfrac></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\frac {N\\\\times (N-1)} {4}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:1.01em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:1.355em;vertical-align:-0.345em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord\\\"><span class=\\\"mopen nulldelimiter\\\"></span><span class=\\\"mfrac\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.01em;\\\"><span style=\\\"top:-2.6550000000000002em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mtight\\\">4</span></span></span></span><span style=\\\"top:-3.15em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"stretchy\\\" style=\\\"height:0.2em;\\\"><svg width='400em' height='0.2em' viewBox='0 0 400000 200' preserveAspectRatio='xMinYMin slice'><path d='M0 80H400000 v40H0z M0 80H400000 v40H0z'/></svg></span></span><span style=\\\"top:-3.485em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathit mtight\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mbin mtight\\\">×</span><span class=\\\"mopen mtight\\\">(</span><span class=\\\"mord mathit mtight\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mbin mtight\\\">−</span><span class=\\\"mord mtight\\\">1</span><span class=\\\"mclose mtight\\\">)</span></span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.345em;\\\"></span></span></span></span><span class=\\\"mclose nulldelimiter\\\"></span></span></span></span></span>次</li>\\n<li>交换复杂度：<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>N</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">O(N^2)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:0.8141079999999999em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:1.064108em;vertical-align:-0.25em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141079999999999em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span></span></span></span></span><span class=\\\"mclose\\\">)</span></span></span></span></li>\\n<li>最坏情况：每次比较完都需要交换，一共<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mfrac><mrow><mi>N</mi><mo>×</mo><mo>(</mo><mi>N</mi><mo>−</mo><mn>1</mn><mo>)</mo></mrow><mrow><mn>2</mn></mrow></mfrac></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\frac {N\\\\times (N-1)} {2}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:1.01em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:1.355em;vertical-align:-0.345em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord\\\"><span class=\\\"mopen nulldelimiter\\\"></span><span class=\\\"mfrac\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.01em;\\\"><span style=\\\"top:-2.6550000000000002em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span><span style=\\\"top:-3.15em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"stretchy\\\" style=\\\"height:0.2em;\\\"><svg width='400em' height='0.2em' viewBox='0 0 400000 200' preserveAspectRatio='xMinYMin slice'><path d='M0 80H400000 v40H0z M0 80H400000 v40H0z'/></svg></span></span><span style=\\\"top:-3.485em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathit mtight\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mbin mtight\\\">×</span><span class=\\\"mopen mtight\\\">(</span><span class=\\\"mord mathit mtight\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mbin mtight\\\">−</span><span class=\\\"mord mtight\\\">1</span><span class=\\\"mclose mtight\\\">)</span></span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.345em;\\\"></span></span></span></span><span class=\\\"mclose nulldelimiter\\\"></span></span></span></span></span>次</li>\\n<li>最好情况：完全排好序，交换<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding=\\\"application/x-tex\\\">0</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:0.64444em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:0.64444em;vertical-align:0em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord\\\">0</span></span></span></span>次</li>\\n<li>平均情况：每次比较到中间进行交换，一共<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mfrac><mrow><mi>N</mi><mo>×</mo><mo>(</mo><mi>N</mi><mo>−</mo><mn>1</mn><mo>)</mo></mrow><mrow><mn>4</mn></mrow></mfrac></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\frac {N\\\\times (N-1)} {4}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:1.01em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:1.355em;vertical-align:-0.345em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord\\\"><span class=\\\"mopen nulldelimiter\\\"></span><span class=\\\"mfrac\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.01em;\\\"><span style=\\\"top:-2.6550000000000002em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mtight\\\">4</span></span></span></span><span style=\\\"top:-3.15em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"stretchy\\\" style=\\\"height:0.2em;\\\"><svg width='400em' height='0.2em' viewBox='0 0 400000 200' preserveAspectRatio='xMinYMin slice'><path d='M0 80H400000 v40H0z M0 80H400000 v40H0z'/></svg></span></span><span style=\\\"top:-3.485em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathit mtight\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mbin mtight\\\">×</span><span class=\\\"mopen mtight\\\">(</span><span class=\\\"mord mathit mtight\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mbin mtight\\\">−</span><span class=\\\"mord mtight\\\">1</span><span class=\\\"mclose mtight\\\">)</span></span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.345em;\\\"></span></span></span></span><span class=\\\"mclose nulldelimiter\\\"></span></span></span></span></span>次</li>\\n</ul>\\n</li>\\n</ul>\\n<h4 id=\\\"复杂度的几种情况\\\"><a href=\\\"#%E5%A4%8D%E6%9D%82%E5%BA%A6%E7%9A%84%E5%87%A0%E7%A7%8D%E6%83%85%E5%86%B5\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>复杂度的几种情况</h4>\\n<p>虽然上面提到了平均情况，但是我们在考虑一个算法时，往往需要考虑其边界，也就是考虑其最坏情况，这样有助于我们对其性能的分析，因此下面以最坏情况进行一个分析</p>\\n<p>仔细看的话，会发现对于比较复杂度，选排是固定的，为<strong><span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mfrac><mrow><mi>N</mi><mo>×</mo><mo>(</mo><mi>N</mi><mo>−</mo><mn>1</mn><mo>)</mo></mrow><mrow><mn>2</mn></mrow></mfrac></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\frac{N\\\\times (N-1)}{2}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:1.01em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:1.355em;vertical-align:-0.345em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord\\\"><span class=\\\"mopen nulldelimiter\\\"></span><span class=\\\"mfrac\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.01em;\\\"><span style=\\\"top:-2.6550000000000002em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span><span style=\\\"top:-3.15em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"stretchy\\\" style=\\\"height:0.2em;\\\"><svg width='400em' height='0.2em' viewBox='0 0 400000 200' preserveAspectRatio='xMinYMin slice'><path d='M0 80H400000 v40H0z M0 80H400000 v40H0z'/></svg></span></span><span style=\\\"top:-3.485em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathit mtight\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mbin mtight\\\">×</span><span class=\\\"mopen mtight\\\">(</span><span class=\\\"mord mathit mtight\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mbin mtight\\\">−</span><span class=\\\"mord mtight\\\">1</span><span class=\\\"mclose mtight\\\">)</span></span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.345em;\\\"></span></span></span></span><span class=\\\"mclose nulldelimiter\\\"></span></span></span></span></span></strong>次，而插排最坏达到<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mfrac><mrow><mi>N</mi><mo>×</mo><mo>(</mo><mi>N</mi><mo>−</mo><mn>1</mn><mo>)</mo></mrow><mrow><mn>2</mn></mrow></mfrac></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\frac {N\\\\times (N-1)} {2}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:1.01em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:1.355em;vertical-align:-0.345em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord\\\"><span class=\\\"mopen nulldelimiter\\\"></span><span class=\\\"mfrac\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.01em;\\\"><span style=\\\"top:-2.6550000000000002em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span><span style=\\\"top:-3.15em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"stretchy\\\" style=\\\"height:0.2em;\\\"><svg width='400em' height='0.2em' viewBox='0 0 400000 200' preserveAspectRatio='xMinYMin slice'><path d='M0 80H400000 v40H0z M0 80H400000 v40H0z'/></svg></span></span><span style=\\\"top:-3.485em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathit mtight\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mbin mtight\\\">×</span><span class=\\\"mopen mtight\\\">(</span><span class=\\\"mord mathit mtight\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mbin mtight\\\">−</span><span class=\\\"mord mtight\\\">1</span><span class=\\\"mclose mtight\\\">)</span></span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.345em;\\\"></span></span></span></span><span class=\\\"mclose nulldelimiter\\\"></span></span></span></span></span>次；而对于交换复杂度，选排最坏<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mi>N</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">N-1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:0.68333em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:0.76666em;vertical-align:-0.08333em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>次，插排最坏<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mfrac><mrow><mi>N</mi><mo>×</mo><mo>(</mo><mi>N</mi><mo>−</mo><mn>1</mn><mo>)</mo></mrow><mrow><mn>2</mn></mrow></mfrac></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\frac {N\\\\times (N-1)} {2}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:1.01em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:1.355em;vertical-align:-0.345em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord\\\"><span class=\\\"mopen nulldelimiter\\\"></span><span class=\\\"mfrac\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.01em;\\\"><span style=\\\"top:-2.6550000000000002em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span><span style=\\\"top:-3.15em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"stretchy\\\" style=\\\"height:0.2em;\\\"><svg width='400em' height='0.2em' viewBox='0 0 400000 200' preserveAspectRatio='xMinYMin slice'><path d='M0 80H400000 v40H0z M0 80H400000 v40H0z'/></svg></span></span><span style=\\\"top:-3.485em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathit mtight\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mbin mtight\\\">×</span><span class=\\\"mopen mtight\\\">(</span><span class=\\\"mord mathit mtight\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mbin mtight\\\">−</span><span class=\\\"mord mtight\\\">1</span><span class=\\\"mclose mtight\\\">)</span></span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.345em;\\\"></span></span></span></span><span class=\\\"mclose nulldelimiter\\\"></span></span></span></span></span>次。其实单单从N的量级上来看，选排似乎更优，但真的是这样吗？</p>\\n<p>算法导论上提到一个排序算法的性能依赖于以下因素</p>\\n<blockquote>\\n<ol>\\n<li>待排项数</li>\\n<li>这些项已排序程度</li>\\n<li>项值的限制</li>\\n<li>计算机体系结构</li>\\n<li>使用的存储设备种类（主存，磁盘或磁带）</li>\\n</ol>\\n</blockquote>\\n<p>我们假设对比基于同一计算机体系结构，存储设备也一样，项值无限制。只要制约因素为待排项数和已排序程度</p>\\n<p>对于已排序程度来说，如果排序程度较大，比较复杂度中插排很难达到最坏情况，此时其实比较次数是很少的；如果N很大时，差异也将显著增大，而插排的交换复杂度是和比较复杂度呈正相关的，此时插排的交换复杂度也会降低。这样来说插排还是由于选排的，因为选排时间复杂度固定，而插排会随着排序程度发生变化</p>\\n<p>查了一些资料，里面都提到上面这种说法，但是却没有对交换开销和比较开销做一个深层次的剖析，直到我在知乎上看到<a href=\\\"https://www.zhihu.com/question/29635851/answer/45113610\\\">这位答主的一个深层次解析</a></p>\\n<p>其实我们没怎么考虑交换，是因为交换开销确实没有比较开销大，交换一般直接交换内存地址而不是直接交换真实的数据，而比较则需要CPU的一些运算。上面答主便给出了自定义赋值函数，如果直接交换数据，增大开销之后，当数据量过大，插入排序反而不如选择排序，因为其交换次数平均情况下和选择排序仍然不是一个量级</p>\\n<p>其实我在quora上还看到一个有趣的回答，什么时候该避免使用插入排序呢？</p>\\n<p>插入排序交换次数多，交换需要写内存，所以使用Flash Memory时，应该减少写操作，因为Flash Memory的擦除次数有限，也就是重新写入次数有限。所以应该避免在Flash Memory上使用插入排序</p>\\n<h4 id=\\\"参考\\\"><a href=\\\"#%E5%8F%82%E8%80%83\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>参考</h4>\\n<ol>\\n<li><a href=\\\"https://www.zhihu.com/question/29635851\\\">为什么说平均情况下，插入排序比选择排序快? - 知乎</a></li>\\n<li><a href=\\\"https://www.quora.com/When-should-one-use-Insertion-vs-Selection-sort\\\">When should one use Insertion sort VS Selection sort ? - quora </a></li>\\n</ol>\\n<h3 id=\\\"3-冒泡排序\\\"><a href=\\\"#3-%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>3. 冒泡排序</h3>\\n<p>冒泡排序也比较好理解，这里为了形象比喻，数组的从前往后相当于大海的由浅至深</p>\\n<p>从后往前比较，如果该数比前一个数小，就交换，否则不换，下一个数又和再下一个数继续比较，小数（小泡泡）往前（往上冒），一轮下来，最小的泡泡已经冒到最顶上了</p>\\n<p>下面使用的是改进的冒泡，也就是说如果一轮比较下来，没有发生一次交换，说明所有泡泡都在自己正确的位置上，也就是排序已完成，无需再进行下一轮冒泡了</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">bubbleSort</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> flag <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 一趟排序下来是否存在至少一次交换</span>\\n  <span class=\\\"token keyword\\\">for</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i<span class=\\\"token operator\\\">=</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">&lt;</span>arr<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">for</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> j<span class=\\\"token operator\\\">=</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> j<span class=\\\"token operator\\\">&lt;</span>arr<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token operator\\\">-</span>i<span class=\\\"token punctuation\\\">;</span> j<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">[</span>j<span class=\\\"token punctuation\\\">]</span><span class=\\\"token operator\\\">></span>arr<span class=\\\"token punctuation\\\">[</span>j<span class=\\\"token operator\\\">+</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">swap</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">,</span> j<span class=\\\"token punctuation\\\">,</span> j<span class=\\\"token operator\\\">+</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        flag <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>flag<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">break</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">swap</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">,</span> a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> temp <span class=\\\"token operator\\\">=</span> arr<span class=\\\"token punctuation\\\">[</span>a<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  arr<span class=\\\"token punctuation\\\">[</span>a<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> arr<span class=\\\"token punctuation\\\">[</span>b<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  arr<span class=\\\"token punctuation\\\">[</span>b<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> temp<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h3 id=\\\"4-归并排序\\\"><a href=\\\"#4-%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>4. 归并排序</h3>\\n<p>递归排序使用的是分治思想</p>\\n<p>首先是<strong>分</strong>的过程，将其分成左右两个部分，分别递归（这叫做<strong>归</strong>）</p>\\n<p>最后是<strong>治</strong>的过程，将左右两个部分合并（这叫做<strong>并</strong>）</p>\\n<p>归并需要额外的空间复杂度，因为我们需要临时存放归并好的部分，存放完成之后还要将其覆盖原数组的相同位置，因此需要额外<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>N</mi><mo>)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">O(N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:0.75em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>的空间</p>\\n<p>对于时间复杂度而言，归并的复杂度等于递归左边的复杂度加上递归右边的复杂度，最后加上合并的复杂度，由于合并时N个元素都需要进行比较，所以也可以用递推方程组求解</p>\\n<span class=\\\"katex-display\\\"><span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mi>T</mi><mo>(</mo><mi>n</mi><mo>)</mo><mo>=</mo><mrow><mo fence=\\\"true\\\">{</mo><mtable><mtr><mtd><mstyle scriptlevel=\\\"0\\\" displaystyle=\\\"false\\\"><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\\\"0\\\" displaystyle=\\\"false\\\"><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\\\"0\\\" displaystyle=\\\"false\\\"><mrow><mn>2</mn><mi>T</mi><mo>(</mo><mfrac><mi>n</mi><mn>2</mn></mfrac><mo>)</mo><mo>+</mo><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\\\"0\\\" displaystyle=\\\"false\\\"><mrow><mi>n</mi><mo>&gt;</mo><mn>1</mn></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding=\\\"application/x-tex\\\">T(n)=\\\\begin{cases}\\nO(1) &amp;n=1 \\\\\\\\\\n2T(\\\\frac n 2)+O(n) &amp;n&gt;1\\n\\\\end{cases}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:1.75em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:3.0000299999999998em;vertical-align:-1.25003em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.13889em;\\\">T</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathit\\\">n</span><span class=\\\"mclose\\\">)</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2777777777777778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2777777777777778em;\\\"></span><span class=\\\"minner\\\"><span class=\\\"mopen delimcenter\\\" style=\\\"top:0em;\\\"><span class=\\\"delimsizing size4\\\">{</span></span><span class=\\\"mord\\\"><span class=\\\"mtable\\\"><span class=\\\"col-align-l\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.69em;\\\"><span style=\\\"top:-3.69em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.008em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span></span></span><span style=\\\"top:-2.25em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.008em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\">2</span><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.13889em;\\\">T</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\"><span class=\\\"mopen nulldelimiter\\\"></span><span class=\\\"mfrac\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.695392em;\\\"><span style=\\\"top:-2.6550000000000002em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span><span style=\\\"top:-3.15em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"stretchy\\\" style=\\\"height:0.2em;\\\"><svg width='400em' height='0.2em' viewBox='0 0 400000 200' preserveAspectRatio='xMinYMin slice'><path d='M0 80H400000 v40H0z M0 80H400000 v40H0z'/></svg></span></span><span style=\\\"top:-3.394em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathit mtight\\\">n</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.345em;\\\"></span></span></span></span><span class=\\\"mclose nulldelimiter\\\"></span></span><span class=\\\"mclose\\\">)</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathit\\\">n</span><span class=\\\"mclose\\\">)</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.19em;\\\"></span></span></span></span><span class=\\\"arraycolsep\\\" style=\\\"width:1em;\\\"></span><span class=\\\"col-align-l\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.69em;\\\"><span style=\\\"top:-3.69em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.008em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathit\\\">n</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2777777777777778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2777777777777778em;\\\"></span><span class=\\\"mord\\\">1</span></span></span><span style=\\\"top:-2.25em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.008em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathit\\\">n</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2777777777777778em;\\\"></span><span class=\\\"mrel\\\">&gt;</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2777777777777778em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.19em;\\\"></span></span></span></span></span></span><span class=\\\"mclose nulldelimiter\\\"></span></span></span></span></span></span>\\n<p>这种递推公式可以用数学递推求解得到<strong><span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mi>T</mi><mo>(</mo><mi>n</mi><mo>)</mo><mo>=</mo><mi>O</mi><mo>(</mo><mi>n</mi><mo>×</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">T(n)=O(n\\\\times \\\\log n)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:0.75em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.13889em;\\\">T</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathit\\\">n</span><span class=\\\"mclose\\\">)</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2777777777777778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2777777777777778em;\\\"></span><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathit\\\">n</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mbin\\\">×</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.16666666666666666em;\\\"></span><span class=\\\"mord mathit\\\">n</span><span class=\\\"mclose\\\">)</span></span></span></span></strong></p>\\n<p>归并时需要知道待归并左部分起始位置和右半部分结束位置</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">mergeSort</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">,</span> tempArr<span class=\\\"token punctuation\\\">,</span> leftBegin<span class=\\\"token punctuation\\\">,</span> rightEnd<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>leftBegin <span class=\\\"token operator\\\">>=</span> rightEnd<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">let</span> center <span class=\\\"token operator\\\">=</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">floor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>leftBegin <span class=\\\"token operator\\\">+</span> rightEnd<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token function\\\">mergeSort</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">,</span> tempArr<span class=\\\"token punctuation\\\">,</span> leftBegin<span class=\\\"token punctuation\\\">,</span> center<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token function\\\">mergeSort</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">,</span> tempArr<span class=\\\"token punctuation\\\">,</span> center <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> rightEnd<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token function\\\">combine</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">,</span> tempArr<span class=\\\"token punctuation\\\">,</span> leftBegin<span class=\\\"token punctuation\\\">,</span> rightEnd<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">combine</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">,</span> tempArr<span class=\\\"token punctuation\\\">,</span> leftBegin<span class=\\\"token punctuation\\\">,</span> rightEnd<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> center <span class=\\\"token operator\\\">=</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">floor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>leftBegin <span class=\\\"token operator\\\">+</span> rightEnd<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> leftBegin<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">let</span> j <span class=\\\"token operator\\\">=</span> center <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">let</span> pos <span class=\\\"token operator\\\">=</span> leftBegin<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">!==</span> center <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token operator\\\">&amp;&amp;</span> j <span class=\\\"token operator\\\">!==</span> rightEnd <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    arr<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">&lt;=</span> arr<span class=\\\"token punctuation\\\">[</span>j<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">?</span> tempArr<span class=\\\"token punctuation\\\">[</span>pos<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> arr<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token punctuation\\\">:</span> tempArr<span class=\\\"token punctuation\\\">[</span>pos<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> arr<span class=\\\"token punctuation\\\">[</span>j<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token comment\\\">// 归并右边剩下的</span>\\n  <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>j <span class=\\\"token operator\\\">!==</span> rightEnd <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    tempArr<span class=\\\"token punctuation\\\">[</span>pos<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> arr<span class=\\\"token punctuation\\\">[</span>j<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token comment\\\">// 归并左边剩下的</span>\\n  <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">!==</span> center <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    tempArr<span class=\\\"token punctuation\\\">[</span>pos<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> arr<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token comment\\\">// 转移到原数组</span>\\n  <span class=\\\"token keyword\\\">while</span><span class=\\\"token punctuation\\\">(</span>leftBegin<span class=\\\"token operator\\\">!==</span>rightEnd<span class=\\\"token operator\\\">+</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    arr<span class=\\\"token punctuation\\\">[</span>leftBegin<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> tempArr<span class=\\\"token punctuation\\\">[</span>leftBegin<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    leftBegin<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h3 id=\\\"5-快速排序\\\"><a href=\\\"#5-%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>5. 快速排序</h3>\\n<p>快速排序分为3个过程</p>\\n<ol>\\n<li>寻找主元（我这里直接使用中间数法，即取待排数组的前中后元素的中位数）</li>\\n<li>将主元交换到正确的位置上</li>\\n<li>递归排序主元的左半部分和右半部分</li>\\n</ol>\\n<h4 id=\\\"快速排序快在哪儿\\\"><a href=\\\"#%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E5%BF%AB%E5%9C%A8%E5%93%AA%E5%84%BF\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>快速排序快在哪儿</h4>\\n<p>我们算法导论课的老师曾说过</p>\\n<blockquote>\\n<p>快速排序快就快在\\\"不捣腾内存\\\"</p>\\n</blockquote>\\n<p>我最初理解的捣腾内存，是只包括交换操作的，直到对选择排序和插入排序进行系统分析，才认为这里的捣腾内存还应该包括比较操作</p>\\n<p>最开始理解快排的快，是因为其主元排好之后位置就不会再改变了，当时与插入排序作比较，因为插入排序插入了一个元素，可能其位置后面还会发生改变。这样的话，选择排序位置一旦选好也不变啊？其实关键点在于快排的主元选取逻辑</p>\\n<h4 id=\\\"主元的选取\\\"><a href=\\\"#%E4%B8%BB%E5%85%83%E7%9A%84%E9%80%89%E5%8F%96\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>主元的选取</h4>\\n<p>要知道，快排并不是所有情况下都快的，想要快，主元要选得好</p>\\n<p>在对于快速排序时间复杂度的分析上，我直接给出递推公式，不再详细分析其比较和交换复杂度，分析起来与选择排序和插入排序类似</p>\\n<p>如果我们每次选取的主元能够对待排序列进行一个二分，则有</p>\\n<span class=\\\"katex-display\\\"><span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mi>T</mi><mo>(</mo><mi>n</mi><mo>)</mo><mo>=</mo><mrow><mo fence=\\\"true\\\">{</mo><mtable><mtr><mtd><mstyle scriptlevel=\\\"0\\\" displaystyle=\\\"false\\\"><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\\\"0\\\" displaystyle=\\\"false\\\"><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\\\"0\\\" displaystyle=\\\"false\\\"><mrow><mn>2</mn><mi>T</mi><mo>(</mo><mfrac><mi>n</mi><mn>2</mn></mfrac><mo>)</mo><mo>+</mo><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\\\"0\\\" displaystyle=\\\"false\\\"><mrow><mi>n</mi><mo>&gt;</mo><mn>1</mn></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding=\\\"application/x-tex\\\">T(n)=\\\\begin{cases}\\nO(1) &amp;n=1 \\\\\\\\\\n2T(\\\\frac n 2)+O(n) &amp;n&gt;1\\n\\\\end{cases}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:1.75em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:3.0000299999999998em;vertical-align:-1.25003em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.13889em;\\\">T</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathit\\\">n</span><span class=\\\"mclose\\\">)</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2777777777777778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2777777777777778em;\\\"></span><span class=\\\"minner\\\"><span class=\\\"mopen delimcenter\\\" style=\\\"top:0em;\\\"><span class=\\\"delimsizing size4\\\">{</span></span><span class=\\\"mord\\\"><span class=\\\"mtable\\\"><span class=\\\"col-align-l\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.69em;\\\"><span style=\\\"top:-3.69em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.008em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span></span></span><span style=\\\"top:-2.25em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.008em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\">2</span><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.13889em;\\\">T</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\"><span class=\\\"mopen nulldelimiter\\\"></span><span class=\\\"mfrac\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.695392em;\\\"><span style=\\\"top:-2.6550000000000002em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span><span style=\\\"top:-3.15em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"stretchy\\\" style=\\\"height:0.2em;\\\"><svg width='400em' height='0.2em' viewBox='0 0 400000 200' preserveAspectRatio='xMinYMin slice'><path d='M0 80H400000 v40H0z M0 80H400000 v40H0z'/></svg></span></span><span style=\\\"top:-3.394em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathit mtight\\\">n</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.345em;\\\"></span></span></span></span><span class=\\\"mclose nulldelimiter\\\"></span></span><span class=\\\"mclose\\\">)</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathit\\\">n</span><span class=\\\"mclose\\\">)</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.19em;\\\"></span></span></span></span><span class=\\\"arraycolsep\\\" style=\\\"width:1em;\\\"></span><span class=\\\"col-align-l\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.69em;\\\"><span style=\\\"top:-3.69em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.008em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathit\\\">n</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2777777777777778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2777777777777778em;\\\"></span><span class=\\\"mord\\\">1</span></span></span><span style=\\\"top:-2.25em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.008em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathit\\\">n</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2777777777777778em;\\\"></span><span class=\\\"mrel\\\">&gt;</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2777777777777778em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.19em;\\\"></span></span></span></span></span></span><span class=\\\"mclose nulldelimiter\\\"></span></span></span></span></span></span>\\n<p>这种递推公式可以用数学递推求解得到<strong><span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mi>T</mi><mo>(</mo><mi>n</mi><mo>)</mo><mo>=</mo><mi>O</mi><mo>(</mo><mi>n</mi><mo>×</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">T(n)=O(n\\\\times \\\\log n)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:0.75em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.13889em;\\\">T</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathit\\\">n</span><span class=\\\"mclose\\\">)</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2777777777777778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2777777777777778em;\\\"></span><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathit\\\">n</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mbin\\\">×</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.16666666666666666em;\\\"></span><span class=\\\"mord mathit\\\">n</span><span class=\\\"mclose\\\">)</span></span></span></span></strong></p>\\n<p>那么，假设最糟糕的情况，我们每次选取的主元都是当前序列最大值（或最小值），无法进行二分，则有</p>\\n<span class=\\\"katex-display\\\"><span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mi>T</mi><mo>(</mo><mi>n</mi><mo>)</mo><mo>=</mo><mrow><mo fence=\\\"true\\\">{</mo><mtable><mtr><mtd><mstyle scriptlevel=\\\"0\\\" displaystyle=\\\"false\\\"><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\\\"0\\\" displaystyle=\\\"false\\\"><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\\\"0\\\" displaystyle=\\\"false\\\"><mrow><mi>T</mi><mo>(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo>)</mo><mo>+</mo><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\\\"0\\\" displaystyle=\\\"false\\\"><mrow><mi>n</mi><mo>&gt;</mo><mn>1</mn></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding=\\\"application/x-tex\\\">T(n)=\\\\begin{cases}\\nO(1) &amp;n=1 \\\\\\\\\\nT(n-1)+O(n) &amp;n&gt;1\\n\\\\end{cases}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:1.75em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:3.0000299999999998em;vertical-align:-1.25003em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.13889em;\\\">T</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathit\\\">n</span><span class=\\\"mclose\\\">)</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2777777777777778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2777777777777778em;\\\"></span><span class=\\\"minner\\\"><span class=\\\"mopen delimcenter\\\" style=\\\"top:0em;\\\"><span class=\\\"delimsizing size4\\\">{</span></span><span class=\\\"mord\\\"><span class=\\\"mtable\\\"><span class=\\\"col-align-l\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.69em;\\\"><span style=\\\"top:-3.69em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.008em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span></span></span><span style=\\\"top:-2.25em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.008em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.13889em;\\\">T</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathit\\\">n</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathit\\\">n</span><span class=\\\"mclose\\\">)</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.19em;\\\"></span></span></span></span><span class=\\\"arraycolsep\\\" style=\\\"width:1em;\\\"></span><span class=\\\"col-align-l\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.69em;\\\"><span style=\\\"top:-3.69em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.008em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathit\\\">n</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2777777777777778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2777777777777778em;\\\"></span><span class=\\\"mord\\\">1</span></span></span><span style=\\\"top:-2.25em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.008em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathit\\\">n</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2777777777777778em;\\\"></span><span class=\\\"mrel\\\">&gt;</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2777777777777778em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.19em;\\\"></span></span></span></span></span></span><span class=\\\"mclose nulldelimiter\\\"></span></span></span></span></span></span>\\n<p>同样，使用数学递推可求解<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mi>T</mi><mo>(</mo><mi>n</mi><mo>)</mo><mo>=</mo><mi>O</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">T(n)=O(n^2)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:0.8141079999999999em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:1.064108em;vertical-align:-0.25em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.13889em;\\\">T</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathit\\\">n</span><span class=\\\"mclose\\\">)</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2777777777777778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2777777777777778em;\\\"></span><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\"><span class=\\\"mord mathit\\\">n</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141079999999999em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span></span></span></span></span><span class=\\\"mclose\\\">)</span></span></span></span></p>\\n<blockquote>\\n<p>其实这种情况，可以理解为和选择排序一样，只不过选择排序是我们有意选择一个最小数，而这种排序则是我们无意中选到了最大数（或最小数），但是我们却还做了很多无用的比较，快排要避免这种情况</p>\\n</blockquote>\\n<p>主元的选取上，由于我看的浙大MOOC上提到的是Median of Three的方法，所以我最开始以为这就是默认的，这种方法其实很难造成最糟糕情况，也是我们常用的方法</p>\\n<p>还有两种方法</p>\\n<ol>\\n<li>直接选取第一个元素，这是最差劲的方法，特别是待排序列有序程度高的情况下，这种方法最容易造成最糟糕复杂度情况，因为第一个元素很可能是最小（或者最大）的元素</li>\\n<li>随机数法，这种方法也比较常见，而且也不容易造成最糟糕情况</li>\\n</ol>\\n<p>主元选择逻辑对算法额外的性能影响</p>\\n<ul>\\n<li>随机数法生成随机数的开销</li>\\n<li>Median of Three中增加了比较次数（前中后三个元素进行比较）</li>\\n</ul>\\n<p>下面的代码我使用Median of Three，同时为了提高性能，在Median Three中不仅仅选出中位数，而且对前中后三个数基于大小交换了位置，最后，将中位数放到最后一个数的前一个（也就是倒数第二个），方便比较</p>\\n<p>JavaScript版本</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">quickSort</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">,</span> left<span class=\\\"token punctuation\\\">,</span> right<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>left <span class=\\\"token operator\\\">>=</span> right<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 边界考虑1</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">let</span> pivot <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">medianThree</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">,</span> left<span class=\\\"token punctuation\\\">,</span> right<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>pivot<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">return</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 边界考虑2</span>\\n  <span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> left<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">let</span> j <span class=\\\"token operator\\\">=</span> right <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">[</span><span class=\\\"token operator\\\">++</span>i<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">&lt;</span> pivot<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">continue</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">[</span><span class=\\\"token operator\\\">--</span>j<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">></span> pivot<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">continue</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">&lt;</span> j<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">swap</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">,</span> i<span class=\\\"token punctuation\\\">,</span> j<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">break</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token function\\\">swap</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">,</span> i<span class=\\\"token punctuation\\\">,</span> right <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token function\\\">quickSort</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">,</span> left<span class=\\\"token punctuation\\\">,</span> i <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token function\\\">quickSort</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">,</span> i <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> right<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">medianThree</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">,</span> left<span class=\\\"token punctuation\\\">,</span> right<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>left<span class=\\\"token operator\\\">+</span><span class=\\\"token number\\\">1</span> <span class=\\\"token operator\\\">===</span> right<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">[</span>left<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">></span> arr<span class=\\\"token punctuation\\\">[</span>right<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">swap</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">,</span> left<span class=\\\"token punctuation\\\">,</span> right<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">return</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">let</span> center <span class=\\\"token operator\\\">=</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">round</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>left <span class=\\\"token operator\\\">+</span> right<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">[</span>left<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">></span> arr<span class=\\\"token punctuation\\\">[</span>center<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">swap</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">,</span> left<span class=\\\"token punctuation\\\">,</span> center<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">[</span>left<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">></span> arr<span class=\\\"token punctuation\\\">[</span>right<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">swap</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">,</span> left<span class=\\\"token punctuation\\\">,</span> right<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">[</span>center<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">></span> arr<span class=\\\"token punctuation\\\">[</span>right<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">swap</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">,</span> center<span class=\\\"token punctuation\\\">,</span> right<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token function\\\">swap</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">,</span> center<span class=\\\"token punctuation\\\">,</span> right <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> arr<span class=\\\"token punctuation\\\">[</span>right <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">swap</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">,</span> a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> temp <span class=\\\"token operator\\\">=</span> arr<span class=\\\"token punctuation\\\">[</span>a<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  arr<span class=\\\"token punctuation\\\">[</span>a<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> arr<span class=\\\"token punctuation\\\">[</span>b<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  arr<span class=\\\"token punctuation\\\">[</span>b<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> temp<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h2 id=\\\"二、全排列\\\"><a href=\\\"#%E4%BA%8C%E3%80%81%E5%85%A8%E6%8E%92%E5%88%97\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>二、全排列</h2>\\n<p>全排列问题在笔试中出现过两三次，我这里想到的是最简单的递归方法</p>\\n<p>将字符串的每一个字符交换到第一个，再将其他部分全排列，使用第一个字符连接上后面全排列的所有可能字符串</p>\\n<p>时间复杂度分析</p>\\n<span class=\\\"katex-display\\\"><span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mi>T</mi><mo>(</mo><mi>n</mi><mo>)</mo><mo>=</mo><mrow><mo fence=\\\"true\\\">{</mo><mtable><mtr><mtd><mstyle scriptlevel=\\\"0\\\" displaystyle=\\\"false\\\"><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\\\"0\\\" displaystyle=\\\"false\\\"><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\\\"0\\\" displaystyle=\\\"false\\\"><mrow><mi>n</mi><mo>×</mo><mi>T</mi><mo>(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo>)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\\\"0\\\" displaystyle=\\\"false\\\"><mrow><mi>n</mi><mo>&gt;</mo><mn>1</mn></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding=\\\"application/x-tex\\\">T(n)=\\\\begin{cases}\\nO(1) &amp;n=1 \\\\\\\\\\nn\\\\times T(n-1) &amp;n&gt;1\\n\\\\end{cases}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:1.75em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:3.0000299999999998em;vertical-align:-1.25003em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.13889em;\\\">T</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathit\\\">n</span><span class=\\\"mclose\\\">)</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2777777777777778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2777777777777778em;\\\"></span><span class=\\\"minner\\\"><span class=\\\"mopen delimcenter\\\" style=\\\"top:0em;\\\"><span class=\\\"delimsizing size4\\\">{</span></span><span class=\\\"mord\\\"><span class=\\\"mtable\\\"><span class=\\\"col-align-l\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.69em;\\\"><span style=\\\"top:-3.69em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.008em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span></span></span><span style=\\\"top:-2.25em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.008em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathit\\\">n</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mbin\\\">×</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.13889em;\\\">T</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathit\\\">n</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.19em;\\\"></span></span></span></span><span class=\\\"arraycolsep\\\" style=\\\"width:1em;\\\"></span><span class=\\\"col-align-l\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.69em;\\\"><span style=\\\"top:-3.69em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.008em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathit\\\">n</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2777777777777778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2777777777777778em;\\\"></span><span class=\\\"mord\\\">1</span></span></span><span style=\\\"top:-2.25em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.008em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathit\\\">n</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2777777777777778em;\\\"></span><span class=\\\"mrel\\\">&gt;</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2777777777777778em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.19em;\\\"></span></span></span></span></span></span><span class=\\\"mclose nulldelimiter\\\"></span></span></span></span></span></span>\\n<p>我们还是使用递推方程帮助我们思考并求解</p>\\n<span class=\\\"katex-display\\\"><span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mtable><mtr><mtd><mstyle scriptlevel=\\\"0\\\" displaystyle=\\\"true\\\"><mrow><mi>T</mi><mo>(</mo><mi>n</mi><mo>)</mo><mo>=</mo><mi>n</mi><mo>×</mo><mi>T</mi><mo>(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo>)</mo><mo>=</mo><mi>n</mi><mo>×</mo><mo>(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo>)</mo><mo>×</mo><mi mathvariant=\\\"normal\\\">.</mi><mi mathvariant=\\\"normal\\\">.</mi><mi mathvariant=\\\"normal\\\">.</mi><mo>×</mo><mn>2</mn><mo>×</mo><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo><mo>=</mo><mi>n</mi><mo>!</mo></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\begin {aligned}\\nT(n)=n\\\\times T(n-1)=n\\\\times (n-1)\\\\times ...\\\\times 2\\\\times O(1)=n!\\n\\\\end {aligned}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:1em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:1.5000000000000002em;vertical-align:-0.5000000000000002em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord\\\"><span class=\\\"mtable\\\"><span class=\\\"col-align-r\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1em;\\\"><span style=\\\"top:-3.16em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.13889em;\\\">T</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathit\\\">n</span><span class=\\\"mclose\\\">)</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2777777777777778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2777777777777778em;\\\"></span><span class=\\\"mord mathit\\\">n</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mbin\\\">×</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.13889em;\\\">T</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathit\\\">n</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2777777777777778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2777777777777778em;\\\"></span><span class=\\\"mord mathit\\\">n</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mbin\\\">×</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathit\\\">n</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mbin\\\">×</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mord\\\">.</span><span class=\\\"mord\\\">.</span><span class=\\\"mord\\\">.</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mbin\\\">×</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mord\\\">2</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mbin\\\">×</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2777777777777778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2777777777777778em;\\\"></span><span class=\\\"mord mathit\\\">n</span><span class=\\\"mclose\\\">!</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.5000000000000002em;\\\"></span></span></span></span></span></span></span></span></span></span>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">getAllPermutations1</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>str<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>str<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">||</span> str<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">===</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">[</span>str<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">let</span> strArr <span class=\\\"token operator\\\">=</span> Array<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">(</span>str<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">let</span> resArr <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  strArr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">forEach</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>v<span class=\\\"token punctuation\\\">,</span> i<span class=\\\"token punctuation\\\">,</span> arr<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">let</span> temp <span class=\\\"token operator\\\">=</span> arr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">slice</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">let</span> header <span class=\\\"token operator\\\">=</span> temp<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">splice</span><span class=\\\"token punctuation\\\">(</span>i<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">permutation</span><span class=\\\"token punctuation\\\">(</span>temp<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">join</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">forEach</span><span class=\\\"token punctuation\\\">(</span>v <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      resArr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span>header<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>v<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">join</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> resArr<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>上网查找之后，还发现一种利用字典顺序的解法，先举一个例子，看这个解法的操作过程，假设求字符串<code class=\\\"language-text\\\">123</code>的全排列</p>\\n<blockquote>\\n<p>起点：<code class=\\\"language-text\\\">123</code>，终点：<code class=\\\"language-text\\\">321</code>，字典序的关键在于下一个排列基于前一个排列，且只比前一个排列大一点点。这个一点点的实现在于每次从倒数第二个元素开始，向后找比它刚好大一点的元素交换，交换之后，让该元素之后的部分元素升序排列，使得其排列刚好比前一个排列大一点点。如果向后找没找到，则从倒数第三个元素开始，以此类推。。。如果没懂，直接看下面一个例子。 </p>\\n<ol>\\n<li><code class=\\\"language-text\\\">123</code>中<code class=\\\"language-text\\\">2</code>向后找比它大一点点的元素<code class=\\\"language-text\\\">3</code>，交换为<code class=\\\"language-text\\\">132</code>，并将<code class=\\\"language-text\\\">3</code>之后部分元素升序排列，结果还是<code class=\\\"language-text\\\">132</code></li>\\n<li><code class=\\\"language-text\\\">132</code>中<code class=\\\"language-text\\\">3</code>向后没找到比它小的，则从<code class=\\\"language-text\\\">1</code>开始向后找，找到比它刚好大一点点的元素<code class=\\\"language-text\\\">2</code>，交换为<code class=\\\"language-text\\\">231</code>，再将<code class=\\\"language-text\\\">2</code>后面的部分元素升序排列为<code class=\\\"language-text\\\">213</code></li>\\n<li>...</li>\\n<li>最后到<code class=\\\"language-text\\\">321</code>，<code class=\\\"language-text\\\">3</code>后面找不到比它更大的元素了，此时循环结束，算法完成</li>\\n</ol>\\n</blockquote>\\n<p>总结出算法的过程如下</p>\\n<ol>\\n<li>对输入字符串先进行升序排列</li>\\n<li>升序序列作为起点</li>\\n<li>\\n<p>输入当前排列，根据当前排列计算出下一轮排列</p>\\n<ol>\\n<li>从当前排列的倒数第二个元素开始向后找一个刚好比它大的元素交换，交换后将它之后的部分元素升序排列，此时得到下一轮序列，返回即可</li>\\n<li>上面一步如果找不到则从倒数第三个元素开始，重复上面一步，以此类推</li>\\n<li>如果走到了第一个元素还找不到，说明该排列到达终点，算法结束</li>\\n</ol>\\n</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">getAllPermutations2</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>str<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> strArr <span class=\\\"token operator\\\">=</span> Array<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">(</span>str<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> resArr <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">let</span> temp <span class=\\\"token operator\\\">=</span> strArr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">sort</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  resArr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>temp<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  temp <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getNextPermutation</span><span class=\\\"token punctuation\\\">(</span>temp<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">while</span><span class=\\\"token punctuation\\\">(</span>temp<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    resArr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>temp<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    temp <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getNextPermutation</span><span class=\\\"token punctuation\\\">(</span>temp<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>resArr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span>item <span class=\\\"token operator\\\">=></span> item<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">join</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// 根据前一个排列获得下一个排列</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">getNextPermutation</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>perm<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>perm<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token operator\\\">===</span><span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">||</span> perm<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token operator\\\">===</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">let</span> len <span class=\\\"token operator\\\">=</span> perm<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">let</span> isFind <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">let</span> nextPerm <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">while</span><span class=\\\"token punctuation\\\">(</span>len <span class=\\\"token operator\\\">></span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">let</span> tempPerm <span class=\\\"token operator\\\">=</span> perm<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">slice</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    isFind <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">findAndSwap</span><span class=\\\"token punctuation\\\">(</span>tempPerm<span class=\\\"token punctuation\\\">,</span> len <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 从倒数第二个元素开始，向后找刚好比它大的元素</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>isFind<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      nextPerm <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">sort</span><span class=\\\"token punctuation\\\">(</span>tempPerm<span class=\\\"token punctuation\\\">,</span> len<span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 如果找到，交换后将该元素后面的元素升序排列</span>\\n      <span class=\\\"token keyword\\\">return</span> nextPerm<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    len<span class=\\\"token operator\\\">--</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 没找到则向前一个元素，继续找</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// 将index及其之后的元素进行升序排列</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">sort</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">,</span> index<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> sortPart <span class=\\\"token operator\\\">=</span> arr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">splice</span><span class=\\\"token punctuation\\\">(</span>index<span class=\\\"token punctuation\\\">,</span> arr<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token operator\\\">-</span>index<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">sort</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token operator\\\">...</span>arr<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>sortPart<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// 从当前数(index)后面找一个刚好比它大的数，并交换位置，找到返回true，找不到false</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">findAndSwap</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">,</span> index<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// 一个元素不需要找，直接false</span>\\n  <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>index <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">let</span> cur <span class=\\\"token operator\\\">=</span> index <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">let</span> nearstIndex <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">while</span><span class=\\\"token punctuation\\\">(</span>cur<span class=\\\"token operator\\\">!==</span>arr<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">[</span>cur<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">></span> arr<span class=\\\"token punctuation\\\">[</span>index<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// 第一次直接更新nearstIndex, 之后需要与之前的比较，更小则更新，否则不变</span>\\n      nearstIndex <span class=\\\"token operator\\\">=</span> <span class=\\\"token operator\\\">!</span>nearstIndex <span class=\\\"token operator\\\">?</span> cur <span class=\\\"token punctuation\\\">:</span> arr<span class=\\\"token punctuation\\\">[</span>cur<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">&lt;</span> arr<span class=\\\"token punctuation\\\">[</span>nearstIndex<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">?</span> cur <span class=\\\"token punctuation\\\">:</span> nearstIndex<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    cur<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>nearstIndex<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">let</span> temp <span class=\\\"token operator\\\">=</span> arr<span class=\\\"token punctuation\\\">[</span>nearstIndex<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    arr<span class=\\\"token punctuation\\\">[</span>nearstIndex<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> arr<span class=\\\"token punctuation\\\">[</span>index<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    arr<span class=\\\"token punctuation\\\">[</span>index<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> temp<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span> \\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">allPermutations</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'cbda'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\",\"frontmatter\":{\"title\":\"面试的那些题-算法篇\",\"date\":\"September 03, 2018\",\"excerpt\":\"最近想复习总结下面试中遇到的所有面试题，以及自己觉得可能出现的面试题，又或者是我觉得不错的需要掌握的知识。这是Master the FED Interviews系列的第三篇：关于算法\",\"contents\":[{\"text\":\"前言\",\"subContents\":null},{\"text\":\"一、排序算法\",\"subContents\":[{\"text\":\"1-选择排序\"},{\"text\":\"2-插入排序\"},{\"text\":\"扩展：插入排序和选择排序的比较\"},{\"text\":\"3-冒泡排序\"},{\"text\":\"4-归并排序\"},{\"text\":\"5-快速排序\"}]},{\"text\":\"二、全排列\",\"subContents\":null}]}}},\"pathContext\":{\"slug\":\"/learning/2018/09/03/Master-the-FED-Interviews-Algorithms/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---learning-2018-09-03-master-the-fed-interviews-algorithms-4098da4b0ec93076eba4.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2 id=\\\"前言\\\"><a href=\\\"#%E5%89%8D%E8%A8%80\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>前言</h2>\\n<p>秋招提前批已经基本结束了，即将进入金九银十，正式的号角已经打响。春招，以及秋招提前批一路过来，断断续续也面了一些公司，自己在笔记上也有总结，甚至自己进行过一些猜题。发现基本问到的问题八九不离十，但是有些知识，特别是偏工程的知识点，如果没遇到过，很难产生深刻的印象。结合自己之前的笔记，也想在正式进入9月之前，整理一个面试题集系列，加深理解</p>\\n<p>这是这个系列的第三篇，关于算法</p>\\n<p>前端开发者的算法知识是一直被诟病的一点，因为前端开发并不需要掌握太多算法知识。其实很多开发都不需要太多的算法知识，所以这里总结的也是一些基础的算法，或者被问过，或者我觉得挺有意思需要掌握。高阶一点的算法，如果我研究过，也觉得有意思，会发表在算法的大分类下</p>\\n<p>现在各领域更新换代很快，很多工作并不需要太多思考。高中以来这么久，虽然学到的知识多了，但自我感觉自己的逻辑思维并没有得到太大的提高。算法其实算是工作之余额外的调剂，动动脑，思考思考，挺好</p>\\n<p>这一领域难免有很多疏漏的地方，因为自己也是算法菜鸟，欢迎指正</p>\\n<h2 id=\\\"一、排序算法\\\"><a href=\\\"#%E4%B8%80%E3%80%81%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>一、排序算法</h2>\\n<p>排序算法可以说是被考到最多的算法系列了，结合着之前自己学习数据结构课程的笔记，以及看过<a href=\\\"https://www.icourse163.org/course/ZJU-93001\\\">浙大的数据结构课程</a> (推荐有时间的一定要去看看，因为讲的真的太棒了)，下面给出一些排序算法的伪码或者是自己写的JavaScript版本</p>\\n<h3 id=\\\"1-选择排序\\\"><a href=\\\"#1-%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>1. 选择排序</h3>\\n<p>选择排序可以说是最好理解的排序了，就是每次从未排数组里找到一个最小的数与数组第一个数做交换即可</p>\\n<h4 id=\\\"时空复杂度分析\\\"><a href=\\\"#%E6%97%B6%E7%A9%BA%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>时空复杂度分析</h4>\\n<ul>\\n<li>额外空间复杂度：<strong><span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">O(1)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:0.75em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span></span></span></span></strong>。因为只需要一个临时变量存最小的数</li>\\n<li>\\n<p>时间复杂度：<strong><span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>N</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">O(N^{2})</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:0.8141079999999999em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:1.064108em;vertical-align:-0.25em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141079999999999em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span></span></span></span></span></span><span class=\\\"mclose\\\">)</span></span></span></span></strong></p>\\n<ul>\\n<li>比较复杂度：<strong><span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>N</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">O(N^{2})</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:0.8141079999999999em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:1.064108em;vertical-align:-0.25em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141079999999999em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span></span></span></span></span></span><span class=\\\"mclose\\\">)</span></span></span></span></strong>。第一次需要(n-1)次比较…第N次需要0次比较，一共<strong><span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mfrac><mrow><mi>N</mi><mo>×</mo><mo>(</mo><mi>N</mi><mo>−</mo><mn>1</mn><mo>)</mo></mrow><mrow><mn>2</mn></mrow></mfrac></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\frac{N\\\\times (N-1)}{2}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:1.01em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:1.355em;vertical-align:-0.345em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord\\\"><span class=\\\"mopen nulldelimiter\\\"></span><span class=\\\"mfrac\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.01em;\\\"><span style=\\\"top:-2.6550000000000002em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span><span style=\\\"top:-3.15em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"stretchy\\\" style=\\\"height:0.2em;\\\"><svg width='400em' height='0.2em' viewBox='0 0 400000 200' preserveAspectRatio='xMinYMin slice'><path d='M0 80H400000 v40H0z M0 80H400000 v40H0z'/></svg></span></span><span style=\\\"top:-3.485em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathit mtight\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mbin mtight\\\">×</span><span class=\\\"mopen mtight\\\">(</span><span class=\\\"mord mathit mtight\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mbin mtight\\\">−</span><span class=\\\"mord mtight\\\">1</span><span class=\\\"mclose mtight\\\">)</span></span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.345em;\\\"></span></span></span></span><span class=\\\"mclose nulldelimiter\\\"></span></span></span></span></span></strong>次</li>\\n<li>交换复杂度：<strong><span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>N</mi><mo>)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">O(N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:0.75em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span></strong></li>\\n<li>最坏情况：每次都需要交换，一共交换<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mi>N</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">N-1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:0.68333em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:0.76666em;vertical-align:-0.08333em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>次</li>\\n<li>最好情况：已排好序，每次无需交换，<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding=\\\"application/x-tex\\\">0</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:0.64444em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:0.64444em;vertical-align:0em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord\\\">0</span></span></span></span>次</li>\\n<li>平均情况：<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mfrac><mrow><mi>N</mi><mo>−</mo><mn>1</mn></mrow><mrow><mn>2</mn></mrow></mfrac></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\frac {N-1}{2}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:0.872331em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:1.217331em;vertical-align:-0.345em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord\\\"><span class=\\\"mopen nulldelimiter\\\"></span><span class=\\\"mfrac\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.872331em;\\\"><span style=\\\"top:-2.6550000000000002em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span><span style=\\\"top:-3.15em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"stretchy\\\" style=\\\"height:0.2em;\\\"><svg width='400em' height='0.2em' viewBox='0 0 400000 200' preserveAspectRatio='xMinYMin slice'><path d='M0 80H400000 v40H0z M0 80H400000 v40H0z'/></svg></span></span><span style=\\\"top:-3.394em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathit mtight\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mbin mtight\\\">−</span><span class=\\\"mord mtight\\\">1</span></span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.345em;\\\"></span></span></span></span><span class=\\\"mclose nulldelimiter\\\"></span></span></span></span></span>次</li>\\n</ul>\\n</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// JavaScript版本</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">selectionSort</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> arr<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">let</span> minPos <span class=\\\"token operator\\\">=</span> i<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> j <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token operator\\\">+</span> i<span class=\\\"token punctuation\\\">;</span> j <span class=\\\"token operator\\\">&lt;</span> arr<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> j<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      minPos <span class=\\\"token operator\\\">=</span> arr<span class=\\\"token punctuation\\\">[</span>minPos<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">&lt;=</span> arr<span class=\\\"token punctuation\\\">[</span>j<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">?</span> minPos <span class=\\\"token punctuation\\\">:</span> j<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token function\\\">swap</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">,</span> i<span class=\\\"token punctuation\\\">,</span> minPos<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">swap</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">,</span> a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> temp <span class=\\\"token operator\\\">=</span> arr<span class=\\\"token punctuation\\\">[</span>a<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  arr<span class=\\\"token punctuation\\\">[</span>a<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> arr<span class=\\\"token punctuation\\\">[</span>b<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  arr<span class=\\\"token punctuation\\\">[</span>b<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> temp<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h3 id=\\\"2-插入排序\\\"><a href=\\\"#2-%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>2. 插入排序</h3>\\n<p>插入排序则类似于我们玩扑克牌游戏时，抽到一张牌，从后往前比较，找到合适位置进行插入</p>\\n<h4 id=\\\"时空复杂度分析-1\\\"><a href=\\\"#%E6%97%B6%E7%A9%BA%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90-1\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>时空复杂度分析</h4>\\n<ul>\\n<li>额外空间复杂度：<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">O(1)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:0.75em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span></span></span></span>。只需要一个临时变量存当前待插入的数</li>\\n<li>\\n<p>时间复杂度：<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>N</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">O(N^2)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:0.8141079999999999em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:1.064108em;vertical-align:-0.25em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141079999999999em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span></span></span></span></span><span class=\\\"mclose\\\">)</span></span></span></span></p>\\n<ul>\\n<li>比较复杂度：<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>N</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">O(N^2)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:0.8141079999999999em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:1.064108em;vertical-align:-0.25em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141079999999999em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span></span></span></span></span><span class=\\\"mclose\\\">)</span></span></span></span></li>\\n<li>最坏情况：每次都要比较到第一个元素，第一次比较1次，第N-1次比较N-1次，一共<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mfrac><mrow><mi>N</mi><mo>×</mo><mo>(</mo><mi>N</mi><mo>−</mo><mn>1</mn><mo>)</mo></mrow><mrow><mn>2</mn></mrow></mfrac></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\frac {N\\\\times (N-1)} {2}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:1.01em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:1.355em;vertical-align:-0.345em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord\\\"><span class=\\\"mopen nulldelimiter\\\"></span><span class=\\\"mfrac\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.01em;\\\"><span style=\\\"top:-2.6550000000000002em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span><span style=\\\"top:-3.15em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"stretchy\\\" style=\\\"height:0.2em;\\\"><svg width='400em' height='0.2em' viewBox='0 0 400000 200' preserveAspectRatio='xMinYMin slice'><path d='M0 80H400000 v40H0z M0 80H400000 v40H0z'/></svg></span></span><span style=\\\"top:-3.485em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathit mtight\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mbin mtight\\\">×</span><span class=\\\"mopen mtight\\\">(</span><span class=\\\"mord mathit mtight\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mbin mtight\\\">−</span><span class=\\\"mord mtight\\\">1</span><span class=\\\"mclose mtight\\\">)</span></span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.345em;\\\"></span></span></span></span><span class=\\\"mclose nulldelimiter\\\"></span></span></span></span></span>次</li>\\n<li>最好情况：完全排好序，每次只需与前一个元素比较，一共比较<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mi>N</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">N-1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:0.68333em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:0.76666em;vertical-align:-0.08333em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>次</li>\\n<li>平均情况：每次平均比较到中间位置，一共<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mfrac><mrow><mi>N</mi><mo>×</mo><mo>(</mo><mi>N</mi><mo>−</mo><mn>1</mn><mo>)</mo></mrow><mrow><mn>4</mn></mrow></mfrac></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\frac {N\\\\times (N-1)} {4}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:1.01em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:1.355em;vertical-align:-0.345em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord\\\"><span class=\\\"mopen nulldelimiter\\\"></span><span class=\\\"mfrac\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.01em;\\\"><span style=\\\"top:-2.6550000000000002em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mtight\\\">4</span></span></span></span><span style=\\\"top:-3.15em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"stretchy\\\" style=\\\"height:0.2em;\\\"><svg width='400em' height='0.2em' viewBox='0 0 400000 200' preserveAspectRatio='xMinYMin slice'><path d='M0 80H400000 v40H0z M0 80H400000 v40H0z'/></svg></span></span><span style=\\\"top:-3.485em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathit mtight\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mbin mtight\\\">×</span><span class=\\\"mopen mtight\\\">(</span><span class=\\\"mord mathit mtight\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mbin mtight\\\">−</span><span class=\\\"mord mtight\\\">1</span><span class=\\\"mclose mtight\\\">)</span></span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.345em;\\\"></span></span></span></span><span class=\\\"mclose nulldelimiter\\\"></span></span></span></span></span>次</li>\\n<li>交换复杂度：<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>N</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">O(N^2)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:0.8141079999999999em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:1.064108em;vertical-align:-0.25em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141079999999999em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span></span></span></span></span><span class=\\\"mclose\\\">)</span></span></span></span></li>\\n<li>最坏情况：每次比较完都需要交换，一共<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mfrac><mrow><mi>N</mi><mo>×</mo><mo>(</mo><mi>N</mi><mo>−</mo><mn>1</mn><mo>)</mo></mrow><mrow><mn>2</mn></mrow></mfrac></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\frac {N\\\\times (N-1)} {2}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:1.01em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:1.355em;vertical-align:-0.345em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord\\\"><span class=\\\"mopen nulldelimiter\\\"></span><span class=\\\"mfrac\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.01em;\\\"><span style=\\\"top:-2.6550000000000002em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span><span style=\\\"top:-3.15em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"stretchy\\\" style=\\\"height:0.2em;\\\"><svg width='400em' height='0.2em' viewBox='0 0 400000 200' preserveAspectRatio='xMinYMin slice'><path d='M0 80H400000 v40H0z M0 80H400000 v40H0z'/></svg></span></span><span style=\\\"top:-3.485em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathit mtight\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mbin mtight\\\">×</span><span class=\\\"mopen mtight\\\">(</span><span class=\\\"mord mathit mtight\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mbin mtight\\\">−</span><span class=\\\"mord mtight\\\">1</span><span class=\\\"mclose mtight\\\">)</span></span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.345em;\\\"></span></span></span></span><span class=\\\"mclose nulldelimiter\\\"></span></span></span></span></span>次</li>\\n<li>最好情况：完全排好序，交换<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding=\\\"application/x-tex\\\">0</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:0.64444em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:0.64444em;vertical-align:0em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord\\\">0</span></span></span></span>次</li>\\n<li>平均情况：每次比较到中间进行交换，一共<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mfrac><mrow><mi>N</mi><mo>×</mo><mo>(</mo><mi>N</mi><mo>−</mo><mn>1</mn><mo>)</mo></mrow><mrow><mn>4</mn></mrow></mfrac></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\frac {N\\\\times (N-1)} {4}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:1.01em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:1.355em;vertical-align:-0.345em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord\\\"><span class=\\\"mopen nulldelimiter\\\"></span><span class=\\\"mfrac\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.01em;\\\"><span style=\\\"top:-2.6550000000000002em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mtight\\\">4</span></span></span></span><span style=\\\"top:-3.15em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"stretchy\\\" style=\\\"height:0.2em;\\\"><svg width='400em' height='0.2em' viewBox='0 0 400000 200' preserveAspectRatio='xMinYMin slice'><path d='M0 80H400000 v40H0z M0 80H400000 v40H0z'/></svg></span></span><span style=\\\"top:-3.485em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathit mtight\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mbin mtight\\\">×</span><span class=\\\"mopen mtight\\\">(</span><span class=\\\"mord mathit mtight\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mbin mtight\\\">−</span><span class=\\\"mord mtight\\\">1</span><span class=\\\"mclose mtight\\\">)</span></span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.345em;\\\"></span></span></span></span><span class=\\\"mclose nulldelimiter\\\"></span></span></span></span></span>次</li>\\n</ul>\\n</li>\\n</ul>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">insertionSort</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> arr<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">let</span> j <span class=\\\"token operator\\\">=</span> i <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">>=</span> arr<span class=\\\"token punctuation\\\">[</span>j<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">continue</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">&lt;</span> arr<span class=\\\"token punctuation\\\">[</span>j<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      j<span class=\\\"token operator\\\">--</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>j <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">break</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">let</span> temp <span class=\\\"token operator\\\">=</span> arr<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">let</span> tempPos <span class=\\\"token operator\\\">=</span> i<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">while</span><span class=\\\"token punctuation\\\">(</span>tempPos<span class=\\\"token operator\\\">!==</span>j<span class=\\\"token operator\\\">+</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      arr<span class=\\\"token punctuation\\\">[</span>tempPos<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> arr<span class=\\\"token punctuation\\\">[</span>tempPos<span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n      tempPos<span class=\\\"token operator\\\">--</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    arr<span class=\\\"token punctuation\\\">[</span>j<span class=\\\"token operator\\\">+</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> temp<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h3 id=\\\"扩展：插入排序和选择排序的比较\\\"><a href=\\\"#%E6%89%A9%E5%B1%95%EF%BC%9A%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F%E5%92%8C%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F%E7%9A%84%E6%AF%94%E8%BE%83\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>扩展：插入排序和选择排序的比较</h3>\\n<h4 id=\\\"时间复杂度分析\\\"><a href=\\\"#%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>时间复杂度分析</h4>\\n<p>让我们再来看看插排和选排的时间复杂度，相信大多数人考虑到的都是比较复杂度作为其总体复杂度。我开始就只考虑这个，但是交换复杂度确实也是存在的，分析起来，还有那么点意思</p>\\n<h4 id=\\\"选择排序\\\"><a href=\\\"#%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>选择排序</h4>\\n<ul>\\n<li>\\n<p>时间复杂度：<strong><span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>N</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">O(N^{2})</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:0.8141079999999999em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:1.064108em;vertical-align:-0.25em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141079999999999em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span></span></span></span></span></span><span class=\\\"mclose\\\">)</span></span></span></span></strong></p>\\n<ul>\\n<li>比较复杂度：<strong><span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>N</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">O(N^{2})</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:0.8141079999999999em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:1.064108em;vertical-align:-0.25em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141079999999999em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span></span></span></span></span></span><span class=\\\"mclose\\\">)</span></span></span></span></strong>。第一次需要(n-1)次比较…第N次需要0次比较，一共<strong><span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mfrac><mrow><mi>N</mi><mo>×</mo><mo>(</mo><mi>N</mi><mo>−</mo><mn>1</mn><mo>)</mo></mrow><mrow><mn>2</mn></mrow></mfrac></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\frac{N\\\\times (N-1)}{2}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:1.01em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:1.355em;vertical-align:-0.345em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord\\\"><span class=\\\"mopen nulldelimiter\\\"></span><span class=\\\"mfrac\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.01em;\\\"><span style=\\\"top:-2.6550000000000002em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span><span style=\\\"top:-3.15em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"stretchy\\\" style=\\\"height:0.2em;\\\"><svg width='400em' height='0.2em' viewBox='0 0 400000 200' preserveAspectRatio='xMinYMin slice'><path d='M0 80H400000 v40H0z M0 80H400000 v40H0z'/></svg></span></span><span style=\\\"top:-3.485em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathit mtight\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mbin mtight\\\">×</span><span class=\\\"mopen mtight\\\">(</span><span class=\\\"mord mathit mtight\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mbin mtight\\\">−</span><span class=\\\"mord mtight\\\">1</span><span class=\\\"mclose mtight\\\">)</span></span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.345em;\\\"></span></span></span></span><span class=\\\"mclose nulldelimiter\\\"></span></span></span></span></span></strong>次</li>\\n<li>交换复杂度：<strong><span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>N</mi><mo>)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">O(N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:0.75em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span></strong></li>\\n<li>最坏情况：每次都需要交换，一共交换<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mi>N</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">N-1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:0.68333em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:0.76666em;vertical-align:-0.08333em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>次</li>\\n<li>最好情况：已排好序，每次无需交换，<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding=\\\"application/x-tex\\\">0</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:0.64444em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:0.64444em;vertical-align:0em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord\\\">0</span></span></span></span>次</li>\\n<li>平均情况：<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mfrac><mrow><mi>N</mi><mo>−</mo><mn>1</mn></mrow><mrow><mn>2</mn></mrow></mfrac></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\frac {N-1}{2}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:0.872331em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:1.217331em;vertical-align:-0.345em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord\\\"><span class=\\\"mopen nulldelimiter\\\"></span><span class=\\\"mfrac\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.872331em;\\\"><span style=\\\"top:-2.6550000000000002em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span><span style=\\\"top:-3.15em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"stretchy\\\" style=\\\"height:0.2em;\\\"><svg width='400em' height='0.2em' viewBox='0 0 400000 200' preserveAspectRatio='xMinYMin slice'><path d='M0 80H400000 v40H0z M0 80H400000 v40H0z'/></svg></span></span><span style=\\\"top:-3.394em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathit mtight\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mbin mtight\\\">−</span><span class=\\\"mord mtight\\\">1</span></span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.345em;\\\"></span></span></span></span><span class=\\\"mclose nulldelimiter\\\"></span></span></span></span></span>次</li>\\n</ul>\\n</li>\\n</ul>\\n<h4 id=\\\"插入排序\\\"><a href=\\\"#%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>插入排序</h4>\\n<ul>\\n<li>\\n<p>时间复杂度：<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>N</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">O(N^2)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:0.8141079999999999em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:1.064108em;vertical-align:-0.25em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141079999999999em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span></span></span></span></span><span class=\\\"mclose\\\">)</span></span></span></span></p>\\n<ul>\\n<li>比较复杂度：<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>N</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">O(N^2)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:0.8141079999999999em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:1.064108em;vertical-align:-0.25em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141079999999999em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span></span></span></span></span><span class=\\\"mclose\\\">)</span></span></span></span></li>\\n<li>最坏情况：每次都要比较到第一个元素，第一次比较1次，第N-1次比较N-1次，一共<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mfrac><mrow><mi>N</mi><mo>×</mo><mo>(</mo><mi>N</mi><mo>−</mo><mn>1</mn><mo>)</mo></mrow><mrow><mn>2</mn></mrow></mfrac></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\frac {N\\\\times (N-1)} {2}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:1.01em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:1.355em;vertical-align:-0.345em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord\\\"><span class=\\\"mopen nulldelimiter\\\"></span><span class=\\\"mfrac\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.01em;\\\"><span style=\\\"top:-2.6550000000000002em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span><span style=\\\"top:-3.15em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"stretchy\\\" style=\\\"height:0.2em;\\\"><svg width='400em' height='0.2em' viewBox='0 0 400000 200' preserveAspectRatio='xMinYMin slice'><path d='M0 80H400000 v40H0z M0 80H400000 v40H0z'/></svg></span></span><span style=\\\"top:-3.485em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathit mtight\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mbin mtight\\\">×</span><span class=\\\"mopen mtight\\\">(</span><span class=\\\"mord mathit mtight\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mbin mtight\\\">−</span><span class=\\\"mord mtight\\\">1</span><span class=\\\"mclose mtight\\\">)</span></span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.345em;\\\"></span></span></span></span><span class=\\\"mclose nulldelimiter\\\"></span></span></span></span></span>次</li>\\n<li>最好情况：完全排好序，每次只需与前一个元素比较，一共比较<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mi>N</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">N-1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:0.68333em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:0.76666em;vertical-align:-0.08333em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>次</li>\\n<li>平均情况：每次平均比较到中间位置，一共<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mfrac><mrow><mi>N</mi><mo>×</mo><mo>(</mo><mi>N</mi><mo>−</mo><mn>1</mn><mo>)</mo></mrow><mrow><mn>4</mn></mrow></mfrac></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\frac {N\\\\times (N-1)} {4}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:1.01em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:1.355em;vertical-align:-0.345em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord\\\"><span class=\\\"mopen nulldelimiter\\\"></span><span class=\\\"mfrac\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.01em;\\\"><span style=\\\"top:-2.6550000000000002em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mtight\\\">4</span></span></span></span><span style=\\\"top:-3.15em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"stretchy\\\" style=\\\"height:0.2em;\\\"><svg width='400em' height='0.2em' viewBox='0 0 400000 200' preserveAspectRatio='xMinYMin slice'><path d='M0 80H400000 v40H0z M0 80H400000 v40H0z'/></svg></span></span><span style=\\\"top:-3.485em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathit mtight\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mbin mtight\\\">×</span><span class=\\\"mopen mtight\\\">(</span><span class=\\\"mord mathit mtight\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mbin mtight\\\">−</span><span class=\\\"mord mtight\\\">1</span><span class=\\\"mclose mtight\\\">)</span></span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.345em;\\\"></span></span></span></span><span class=\\\"mclose nulldelimiter\\\"></span></span></span></span></span>次</li>\\n<li>交换复杂度：<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>N</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">O(N^2)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:0.8141079999999999em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:1.064108em;vertical-align:-0.25em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141079999999999em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span></span></span></span></span><span class=\\\"mclose\\\">)</span></span></span></span></li>\\n<li>最坏情况：每次比较完都需要交换，一共<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mfrac><mrow><mi>N</mi><mo>×</mo><mo>(</mo><mi>N</mi><mo>−</mo><mn>1</mn><mo>)</mo></mrow><mrow><mn>2</mn></mrow></mfrac></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\frac {N\\\\times (N-1)} {2}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:1.01em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:1.355em;vertical-align:-0.345em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord\\\"><span class=\\\"mopen nulldelimiter\\\"></span><span class=\\\"mfrac\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.01em;\\\"><span style=\\\"top:-2.6550000000000002em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span><span style=\\\"top:-3.15em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"stretchy\\\" style=\\\"height:0.2em;\\\"><svg width='400em' height='0.2em' viewBox='0 0 400000 200' preserveAspectRatio='xMinYMin slice'><path d='M0 80H400000 v40H0z M0 80H400000 v40H0z'/></svg></span></span><span style=\\\"top:-3.485em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathit mtight\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mbin mtight\\\">×</span><span class=\\\"mopen mtight\\\">(</span><span class=\\\"mord mathit mtight\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mbin mtight\\\">−</span><span class=\\\"mord mtight\\\">1</span><span class=\\\"mclose mtight\\\">)</span></span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.345em;\\\"></span></span></span></span><span class=\\\"mclose nulldelimiter\\\"></span></span></span></span></span>次</li>\\n<li>最好情况：完全排好序，交换<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mn>0</mn></mrow><annotation encoding=\\\"application/x-tex\\\">0</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:0.64444em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:0.64444em;vertical-align:0em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord\\\">0</span></span></span></span>次</li>\\n<li>平均情况：每次比较到中间进行交换，一共<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mfrac><mrow><mi>N</mi><mo>×</mo><mo>(</mo><mi>N</mi><mo>−</mo><mn>1</mn><mo>)</mo></mrow><mrow><mn>4</mn></mrow></mfrac></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\frac {N\\\\times (N-1)} {4}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:1.01em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:1.355em;vertical-align:-0.345em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord\\\"><span class=\\\"mopen nulldelimiter\\\"></span><span class=\\\"mfrac\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.01em;\\\"><span style=\\\"top:-2.6550000000000002em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mtight\\\">4</span></span></span></span><span style=\\\"top:-3.15em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"stretchy\\\" style=\\\"height:0.2em;\\\"><svg width='400em' height='0.2em' viewBox='0 0 400000 200' preserveAspectRatio='xMinYMin slice'><path d='M0 80H400000 v40H0z M0 80H400000 v40H0z'/></svg></span></span><span style=\\\"top:-3.485em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathit mtight\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mbin mtight\\\">×</span><span class=\\\"mopen mtight\\\">(</span><span class=\\\"mord mathit mtight\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mbin mtight\\\">−</span><span class=\\\"mord mtight\\\">1</span><span class=\\\"mclose mtight\\\">)</span></span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.345em;\\\"></span></span></span></span><span class=\\\"mclose nulldelimiter\\\"></span></span></span></span></span>次</li>\\n</ul>\\n</li>\\n</ul>\\n<h4 id=\\\"复杂度的几种情况\\\"><a href=\\\"#%E5%A4%8D%E6%9D%82%E5%BA%A6%E7%9A%84%E5%87%A0%E7%A7%8D%E6%83%85%E5%86%B5\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>复杂度的几种情况</h4>\\n<p>虽然上面提到了平均情况，但是我们在考虑一个算法时，往往需要考虑其边界，也就是考虑其最坏情况，这样有助于我们对其性能的分析，因此下面以最坏情况进行一个分析</p>\\n<p>仔细看的话，会发现对于比较复杂度，选排是固定的，为<strong><span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mfrac><mrow><mi>N</mi><mo>×</mo><mo>(</mo><mi>N</mi><mo>−</mo><mn>1</mn><mo>)</mo></mrow><mrow><mn>2</mn></mrow></mfrac></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\frac{N\\\\times (N-1)}{2}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:1.01em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:1.355em;vertical-align:-0.345em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord\\\"><span class=\\\"mopen nulldelimiter\\\"></span><span class=\\\"mfrac\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.01em;\\\"><span style=\\\"top:-2.6550000000000002em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span><span style=\\\"top:-3.15em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"stretchy\\\" style=\\\"height:0.2em;\\\"><svg width='400em' height='0.2em' viewBox='0 0 400000 200' preserveAspectRatio='xMinYMin slice'><path d='M0 80H400000 v40H0z M0 80H400000 v40H0z'/></svg></span></span><span style=\\\"top:-3.485em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathit mtight\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mbin mtight\\\">×</span><span class=\\\"mopen mtight\\\">(</span><span class=\\\"mord mathit mtight\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mbin mtight\\\">−</span><span class=\\\"mord mtight\\\">1</span><span class=\\\"mclose mtight\\\">)</span></span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.345em;\\\"></span></span></span></span><span class=\\\"mclose nulldelimiter\\\"></span></span></span></span></span></strong>次，而插排最坏达到<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mfrac><mrow><mi>N</mi><mo>×</mo><mo>(</mo><mi>N</mi><mo>−</mo><mn>1</mn><mo>)</mo></mrow><mrow><mn>2</mn></mrow></mfrac></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\frac {N\\\\times (N-1)} {2}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:1.01em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:1.355em;vertical-align:-0.345em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord\\\"><span class=\\\"mopen nulldelimiter\\\"></span><span class=\\\"mfrac\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.01em;\\\"><span style=\\\"top:-2.6550000000000002em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span><span style=\\\"top:-3.15em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"stretchy\\\" style=\\\"height:0.2em;\\\"><svg width='400em' height='0.2em' viewBox='0 0 400000 200' preserveAspectRatio='xMinYMin slice'><path d='M0 80H400000 v40H0z M0 80H400000 v40H0z'/></svg></span></span><span style=\\\"top:-3.485em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathit mtight\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mbin mtight\\\">×</span><span class=\\\"mopen mtight\\\">(</span><span class=\\\"mord mathit mtight\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mbin mtight\\\">−</span><span class=\\\"mord mtight\\\">1</span><span class=\\\"mclose mtight\\\">)</span></span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.345em;\\\"></span></span></span></span><span class=\\\"mclose nulldelimiter\\\"></span></span></span></span></span>次；而对于交换复杂度，选排最坏<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mi>N</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\\\"application/x-tex\\\">N-1</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:0.68333em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:0.76666em;vertical-align:-0.08333em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span>次，插排最坏<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mfrac><mrow><mi>N</mi><mo>×</mo><mo>(</mo><mi>N</mi><mo>−</mo><mn>1</mn><mo>)</mo></mrow><mrow><mn>2</mn></mrow></mfrac></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\frac {N\\\\times (N-1)} {2}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:1.01em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:1.355em;vertical-align:-0.345em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord\\\"><span class=\\\"mopen nulldelimiter\\\"></span><span class=\\\"mfrac\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.01em;\\\"><span style=\\\"top:-2.6550000000000002em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span><span style=\\\"top:-3.15em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"stretchy\\\" style=\\\"height:0.2em;\\\"><svg width='400em' height='0.2em' viewBox='0 0 400000 200' preserveAspectRatio='xMinYMin slice'><path d='M0 80H400000 v40H0z M0 80H400000 v40H0z'/></svg></span></span><span style=\\\"top:-3.485em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\"><span class=\\\"mord mathit mtight\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mbin mtight\\\">×</span><span class=\\\"mopen mtight\\\">(</span><span class=\\\"mord mathit mtight\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mbin mtight\\\">−</span><span class=\\\"mord mtight\\\">1</span><span class=\\\"mclose mtight\\\">)</span></span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.345em;\\\"></span></span></span></span><span class=\\\"mclose nulldelimiter\\\"></span></span></span></span></span>次。其实单单从N的量级上来看，选排似乎更优，但真的是这样吗？</p>\\n<p>算法导论上提到一个排序算法的性能依赖于以下因素</p>\\n<blockquote>\\n<ol>\\n<li>待排项数</li>\\n<li>这些项已排序程度</li>\\n<li>项值的限制</li>\\n<li>计算机体系结构</li>\\n<li>使用的存储设备种类（主存，磁盘或磁带）</li>\\n</ol>\\n</blockquote>\\n<p>我们假设对比基于同一计算机体系结构，存储设备也一样，项值无限制。只要制约因素为待排项数和已排序程度</p>\\n<p>对于已排序程度来说，如果排序程度较大，比较复杂度中插排很难达到最坏情况，此时其实比较次数是很少的；如果N很大时，差异也将显著增大，而插排的交换复杂度是和比较复杂度呈正相关的，此时插排的交换复杂度也会降低。这样来说插排还是由于选排的，因为选排时间复杂度固定，而插排会随着排序程度发生变化</p>\\n<p>查了一些资料，里面都提到上面这种说法，但是却没有对交换开销和比较开销做一个深层次的剖析，直到我在知乎上看到<a href=\\\"https://www.zhihu.com/question/29635851/answer/45113610\\\">这位答主的一个深层次解析</a></p>\\n<p>其实我们没怎么考虑交换，是因为交换开销确实没有比较开销大，交换一般直接交换内存地址而不是直接交换真实的数据，而比较则需要CPU的一些运算。上面答主便给出了自定义赋值函数，如果直接交换数据，增大开销之后，当数据量过大，插入排序反而不如选择排序，因为其交换次数平均情况下和选择排序仍然不是一个量级</p>\\n<p>其实我在quora上还看到一个有趣的回答，什么时候该避免使用插入排序呢？</p>\\n<p>插入排序交换次数多，交换需要写内存，所以使用Flash Memory时，应该减少写操作，因为Flash Memory的擦除次数有限，也就是重新写入次数有限。所以应该避免在Flash Memory上使用插入排序</p>\\n<h4 id=\\\"参考\\\"><a href=\\\"#%E5%8F%82%E8%80%83\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>参考</h4>\\n<ol>\\n<li><a href=\\\"https://www.zhihu.com/question/29635851\\\">为什么说平均情况下，插入排序比选择排序快? - 知乎</a></li>\\n<li><a href=\\\"https://www.quora.com/When-should-one-use-Insertion-vs-Selection-sort\\\">When should one use Insertion sort VS Selection sort ? - quora </a></li>\\n</ol>\\n<h3 id=\\\"3-冒泡排序\\\"><a href=\\\"#3-%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>3. 冒泡排序</h3>\\n<p>冒泡排序也比较好理解，这里为了形象比喻，数组的从前往后相当于大海的由浅至深</p>\\n<p>从后往前比较，如果该数比前一个数小，就交换，否则不换，下一个数又和再下一个数继续比较，小数（小泡泡）往前（往上冒），一轮下来，最小的泡泡已经冒到最顶上了</p>\\n<p>下面使用的是改进的冒泡，也就是说如果一轮比较下来，没有发生一次交换，说明所有泡泡都在自己正确的位置上，也就是排序已完成，无需再进行下一轮冒泡了</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">bubbleSort</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> flag <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 一趟排序下来是否存在至少一次交换</span>\\n  <span class=\\\"token keyword\\\">for</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> i<span class=\\\"token operator\\\">=</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">&lt;</span>arr<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">for</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> j<span class=\\\"token operator\\\">=</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> j<span class=\\\"token operator\\\">&lt;</span>arr<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token operator\\\">-</span>i<span class=\\\"token punctuation\\\">;</span> j<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">[</span>j<span class=\\\"token punctuation\\\">]</span><span class=\\\"token operator\\\">></span>arr<span class=\\\"token punctuation\\\">[</span>j<span class=\\\"token operator\\\">+</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">swap</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">,</span> j<span class=\\\"token punctuation\\\">,</span> j<span class=\\\"token operator\\\">+</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        flag <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>flag<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">break</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">swap</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">,</span> a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> temp <span class=\\\"token operator\\\">=</span> arr<span class=\\\"token punctuation\\\">[</span>a<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  arr<span class=\\\"token punctuation\\\">[</span>a<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> arr<span class=\\\"token punctuation\\\">[</span>b<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  arr<span class=\\\"token punctuation\\\">[</span>b<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> temp<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h3 id=\\\"4-归并排序\\\"><a href=\\\"#4-%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>4. 归并排序</h3>\\n<p>递归排序使用的是分治思想</p>\\n<p>首先是<strong>分</strong>的过程，将其分成左右两个部分，分别递归（这叫做<strong>归</strong>）</p>\\n<p>最后是<strong>治</strong>的过程，将左右两个部分合并（这叫做<strong>并</strong>）</p>\\n<p>归并需要额外的空间复杂度，因为我们需要临时存放归并好的部分，存放完成之后还要将其覆盖原数组的相同位置，因此需要额外<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>N</mi><mo>)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">O(N)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:0.75em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.10903em;\\\">N</span><span class=\\\"mclose\\\">)</span></span></span></span>的空间</p>\\n<p>对于时间复杂度而言，归并的复杂度等于递归左边的复杂度加上递归右边的复杂度，最后加上合并的复杂度，由于合并时N个元素都需要进行比较，所以也可以用递推方程组求解</p>\\n<span class=\\\"katex-display\\\"><span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mi>T</mi><mo>(</mo><mi>n</mi><mo>)</mo><mo>=</mo><mrow><mo fence=\\\"true\\\">{</mo><mtable><mtr><mtd><mstyle scriptlevel=\\\"0\\\" displaystyle=\\\"false\\\"><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\\\"0\\\" displaystyle=\\\"false\\\"><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\\\"0\\\" displaystyle=\\\"false\\\"><mrow><mn>2</mn><mi>T</mi><mo>(</mo><mfrac><mi>n</mi><mn>2</mn></mfrac><mo>)</mo><mo>+</mo><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\\\"0\\\" displaystyle=\\\"false\\\"><mrow><mi>n</mi><mo>&gt;</mo><mn>1</mn></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding=\\\"application/x-tex\\\">T(n)=\\\\begin{cases}\\nO(1) &amp;n=1 \\\\\\\\\\n2T(\\\\frac n 2)+O(n) &amp;n&gt;1\\n\\\\end{cases}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:1.75em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:3.0000299999999998em;vertical-align:-1.25003em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.13889em;\\\">T</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathit\\\">n</span><span class=\\\"mclose\\\">)</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2777777777777778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2777777777777778em;\\\"></span><span class=\\\"minner\\\"><span class=\\\"mopen delimcenter\\\" style=\\\"top:0em;\\\"><span class=\\\"delimsizing size4\\\">{</span></span><span class=\\\"mord\\\"><span class=\\\"mtable\\\"><span class=\\\"col-align-l\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.69em;\\\"><span style=\\\"top:-3.69em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.008em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span></span></span><span style=\\\"top:-2.25em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.008em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\">2</span><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.13889em;\\\">T</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\"><span class=\\\"mopen nulldelimiter\\\"></span><span class=\\\"mfrac\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.695392em;\\\"><span style=\\\"top:-2.6550000000000002em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span><span style=\\\"top:-3.15em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"stretchy\\\" style=\\\"height:0.2em;\\\"><svg width='400em' height='0.2em' viewBox='0 0 400000 200' preserveAspectRatio='xMinYMin slice'><path d='M0 80H400000 v40H0z M0 80H400000 v40H0z'/></svg></span></span><span style=\\\"top:-3.394em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathit mtight\\\">n</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.345em;\\\"></span></span></span></span><span class=\\\"mclose nulldelimiter\\\"></span></span><span class=\\\"mclose\\\">)</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathit\\\">n</span><span class=\\\"mclose\\\">)</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.19em;\\\"></span></span></span></span><span class=\\\"arraycolsep\\\" style=\\\"width:1em;\\\"></span><span class=\\\"col-align-l\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.69em;\\\"><span style=\\\"top:-3.69em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.008em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathit\\\">n</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2777777777777778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2777777777777778em;\\\"></span><span class=\\\"mord\\\">1</span></span></span><span style=\\\"top:-2.25em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.008em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathit\\\">n</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2777777777777778em;\\\"></span><span class=\\\"mrel\\\">&gt;</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2777777777777778em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.19em;\\\"></span></span></span></span></span></span><span class=\\\"mclose nulldelimiter\\\"></span></span></span></span></span></span>\\n<p>这种递推公式可以用数学递推求解得到<strong><span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mi>T</mi><mo>(</mo><mi>n</mi><mo>)</mo><mo>=</mo><mi>O</mi><mo>(</mo><mi>n</mi><mo>×</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">T(n)=O(n\\\\times \\\\log n)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:0.75em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.13889em;\\\">T</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathit\\\">n</span><span class=\\\"mclose\\\">)</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2777777777777778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2777777777777778em;\\\"></span><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathit\\\">n</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mbin\\\">×</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.16666666666666666em;\\\"></span><span class=\\\"mord mathit\\\">n</span><span class=\\\"mclose\\\">)</span></span></span></span></strong></p>\\n<p>归并时需要知道待归并左部分起始位置和右半部分结束位置</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">mergeSort</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">,</span> tempArr<span class=\\\"token punctuation\\\">,</span> leftBegin<span class=\\\"token punctuation\\\">,</span> rightEnd<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>leftBegin <span class=\\\"token operator\\\">>=</span> rightEnd<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">let</span> center <span class=\\\"token operator\\\">=</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">floor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>leftBegin <span class=\\\"token operator\\\">+</span> rightEnd<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token function\\\">mergeSort</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">,</span> tempArr<span class=\\\"token punctuation\\\">,</span> leftBegin<span class=\\\"token punctuation\\\">,</span> center<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token function\\\">mergeSort</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">,</span> tempArr<span class=\\\"token punctuation\\\">,</span> center <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> rightEnd<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token function\\\">combine</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">,</span> tempArr<span class=\\\"token punctuation\\\">,</span> leftBegin<span class=\\\"token punctuation\\\">,</span> rightEnd<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">combine</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">,</span> tempArr<span class=\\\"token punctuation\\\">,</span> leftBegin<span class=\\\"token punctuation\\\">,</span> rightEnd<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> center <span class=\\\"token operator\\\">=</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">floor</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>leftBegin <span class=\\\"token operator\\\">+</span> rightEnd<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> leftBegin<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">let</span> j <span class=\\\"token operator\\\">=</span> center <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">let</span> pos <span class=\\\"token operator\\\">=</span> leftBegin<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">!==</span> center <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token operator\\\">&amp;&amp;</span> j <span class=\\\"token operator\\\">!==</span> rightEnd <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    arr<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">&lt;=</span> arr<span class=\\\"token punctuation\\\">[</span>j<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">?</span> tempArr<span class=\\\"token punctuation\\\">[</span>pos<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> arr<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token punctuation\\\">:</span> tempArr<span class=\\\"token punctuation\\\">[</span>pos<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> arr<span class=\\\"token punctuation\\\">[</span>j<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token comment\\\">// 归并右边剩下的</span>\\n  <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>j <span class=\\\"token operator\\\">!==</span> rightEnd <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    tempArr<span class=\\\"token punctuation\\\">[</span>pos<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> arr<span class=\\\"token punctuation\\\">[</span>j<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token comment\\\">// 归并左边剩下的</span>\\n  <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">!==</span> center <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    tempArr<span class=\\\"token punctuation\\\">[</span>pos<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> arr<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token comment\\\">// 转移到原数组</span>\\n  <span class=\\\"token keyword\\\">while</span><span class=\\\"token punctuation\\\">(</span>leftBegin<span class=\\\"token operator\\\">!==</span>rightEnd<span class=\\\"token operator\\\">+</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    arr<span class=\\\"token punctuation\\\">[</span>leftBegin<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> tempArr<span class=\\\"token punctuation\\\">[</span>leftBegin<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    leftBegin<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h3 id=\\\"5-快速排序\\\"><a href=\\\"#5-%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>5. 快速排序</h3>\\n<p>快速排序分为3个过程</p>\\n<ol>\\n<li>寻找主元（我这里直接使用中间数法，即取待排数组的前中后元素的中位数）</li>\\n<li>将主元交换到正确的位置上</li>\\n<li>递归排序主元的左半部分和右半部分</li>\\n</ol>\\n<h4 id=\\\"快速排序快在哪儿\\\"><a href=\\\"#%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E5%BF%AB%E5%9C%A8%E5%93%AA%E5%84%BF\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>快速排序快在哪儿</h4>\\n<p>我们算法导论课的老师曾说过</p>\\n<blockquote>\\n<p>快速排序快就快在\\\"不捣腾内存\\\"</p>\\n</blockquote>\\n<p>我最初理解的捣腾内存，是只包括交换操作的，直到对选择排序和插入排序进行系统分析，才认为这里的捣腾内存还应该包括比较操作</p>\\n<p>最开始理解快排的快，是因为其主元排好之后位置就不会再改变了，当时与插入排序作比较，因为插入排序插入了一个元素，可能其位置后面还会发生改变。这样的话，选择排序位置一旦选好也不变啊？其实关键点在于快排的主元选取逻辑</p>\\n<h4 id=\\\"主元的选取\\\"><a href=\\\"#%E4%B8%BB%E5%85%83%E7%9A%84%E9%80%89%E5%8F%96\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>主元的选取</h4>\\n<p>要知道，快排并不是所有情况下都快的，想要快，主元要选得好</p>\\n<p>在对于快速排序时间复杂度的分析上，我直接给出递推公式，不再详细分析其比较和交换复杂度，分析起来与选择排序和插入排序类似</p>\\n<p>如果我们每次选取的主元能够对待排序列进行一个二分，则有</p>\\n<span class=\\\"katex-display\\\"><span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mi>T</mi><mo>(</mo><mi>n</mi><mo>)</mo><mo>=</mo><mrow><mo fence=\\\"true\\\">{</mo><mtable><mtr><mtd><mstyle scriptlevel=\\\"0\\\" displaystyle=\\\"false\\\"><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\\\"0\\\" displaystyle=\\\"false\\\"><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\\\"0\\\" displaystyle=\\\"false\\\"><mrow><mn>2</mn><mi>T</mi><mo>(</mo><mfrac><mi>n</mi><mn>2</mn></mfrac><mo>)</mo><mo>+</mo><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\\\"0\\\" displaystyle=\\\"false\\\"><mrow><mi>n</mi><mo>&gt;</mo><mn>1</mn></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding=\\\"application/x-tex\\\">T(n)=\\\\begin{cases}\\nO(1) &amp;n=1 \\\\\\\\\\n2T(\\\\frac n 2)+O(n) &amp;n&gt;1\\n\\\\end{cases}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:1.75em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:3.0000299999999998em;vertical-align:-1.25003em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.13889em;\\\">T</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathit\\\">n</span><span class=\\\"mclose\\\">)</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2777777777777778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2777777777777778em;\\\"></span><span class=\\\"minner\\\"><span class=\\\"mopen delimcenter\\\" style=\\\"top:0em;\\\"><span class=\\\"delimsizing size4\\\">{</span></span><span class=\\\"mord\\\"><span class=\\\"mtable\\\"><span class=\\\"col-align-l\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.69em;\\\"><span style=\\\"top:-3.69em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.008em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span></span></span><span style=\\\"top:-2.25em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.008em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord\\\">2</span><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.13889em;\\\">T</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\"><span class=\\\"mopen nulldelimiter\\\"></span><span class=\\\"mfrac\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.695392em;\\\"><span style=\\\"top:-2.6550000000000002em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span><span style=\\\"top:-3.15em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"stretchy\\\" style=\\\"height:0.2em;\\\"><svg width='400em' height='0.2em' viewBox='0 0 400000 200' preserveAspectRatio='xMinYMin slice'><path d='M0 80H400000 v40H0z M0 80H400000 v40H0z'/></svg></span></span><span style=\\\"top:-3.394em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mathit mtight\\\">n</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.345em;\\\"></span></span></span></span><span class=\\\"mclose nulldelimiter\\\"></span></span><span class=\\\"mclose\\\">)</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathit\\\">n</span><span class=\\\"mclose\\\">)</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.19em;\\\"></span></span></span></span><span class=\\\"arraycolsep\\\" style=\\\"width:1em;\\\"></span><span class=\\\"col-align-l\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.69em;\\\"><span style=\\\"top:-3.69em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.008em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathit\\\">n</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2777777777777778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2777777777777778em;\\\"></span><span class=\\\"mord\\\">1</span></span></span><span style=\\\"top:-2.25em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.008em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathit\\\">n</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2777777777777778em;\\\"></span><span class=\\\"mrel\\\">&gt;</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2777777777777778em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.19em;\\\"></span></span></span></span></span></span><span class=\\\"mclose nulldelimiter\\\"></span></span></span></span></span></span>\\n<p>这种递推公式可以用数学递推求解得到<strong><span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mi>T</mi><mo>(</mo><mi>n</mi><mo>)</mo><mo>=</mo><mi>O</mi><mo>(</mo><mi>n</mi><mo>×</mo><mi>log</mi><mo>⁡</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">T(n)=O(n\\\\times \\\\log n)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:0.75em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:1em;vertical-align:-0.25em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.13889em;\\\">T</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathit\\\">n</span><span class=\\\"mclose\\\">)</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2777777777777778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2777777777777778em;\\\"></span><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathit\\\">n</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mbin\\\">×</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mop\\\">lo<span style=\\\"margin-right:0.01389em;\\\">g</span></span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.16666666666666666em;\\\"></span><span class=\\\"mord mathit\\\">n</span><span class=\\\"mclose\\\">)</span></span></span></span></strong></p>\\n<p>那么，假设最糟糕的情况，我们每次选取的主元都是当前序列最大值（或最小值），无法进行二分，则有</p>\\n<span class=\\\"katex-display\\\"><span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mi>T</mi><mo>(</mo><mi>n</mi><mo>)</mo><mo>=</mo><mrow><mo fence=\\\"true\\\">{</mo><mtable><mtr><mtd><mstyle scriptlevel=\\\"0\\\" displaystyle=\\\"false\\\"><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\\\"0\\\" displaystyle=\\\"false\\\"><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\\\"0\\\" displaystyle=\\\"false\\\"><mrow><mi>T</mi><mo>(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo>)</mo><mo>+</mo><mi>O</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\\\"0\\\" displaystyle=\\\"false\\\"><mrow><mi>n</mi><mo>&gt;</mo><mn>1</mn></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding=\\\"application/x-tex\\\">T(n)=\\\\begin{cases}\\nO(1) &amp;n=1 \\\\\\\\\\nT(n-1)+O(n) &amp;n&gt;1\\n\\\\end{cases}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:1.75em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:3.0000299999999998em;vertical-align:-1.25003em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.13889em;\\\">T</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathit\\\">n</span><span class=\\\"mclose\\\">)</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2777777777777778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2777777777777778em;\\\"></span><span class=\\\"minner\\\"><span class=\\\"mopen delimcenter\\\" style=\\\"top:0em;\\\"><span class=\\\"delimsizing size4\\\">{</span></span><span class=\\\"mord\\\"><span class=\\\"mtable\\\"><span class=\\\"col-align-l\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.69em;\\\"><span style=\\\"top:-3.69em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.008em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span></span></span><span style=\\\"top:-2.25em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.008em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.13889em;\\\">T</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathit\\\">n</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mbin\\\">+</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathit\\\">n</span><span class=\\\"mclose\\\">)</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.19em;\\\"></span></span></span></span><span class=\\\"arraycolsep\\\" style=\\\"width:1em;\\\"></span><span class=\\\"col-align-l\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.69em;\\\"><span style=\\\"top:-3.69em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.008em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathit\\\">n</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2777777777777778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2777777777777778em;\\\"></span><span class=\\\"mord\\\">1</span></span></span><span style=\\\"top:-2.25em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.008em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathit\\\">n</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2777777777777778em;\\\"></span><span class=\\\"mrel\\\">&gt;</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2777777777777778em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.19em;\\\"></span></span></span></span></span></span><span class=\\\"mclose nulldelimiter\\\"></span></span></span></span></span></span>\\n<p>同样，使用数学递推可求解<span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mi>T</mi><mo>(</mo><mi>n</mi><mo>)</mo><mo>=</mo><mi>O</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding=\\\"application/x-tex\\\">T(n)=O(n^2)</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:0.8141079999999999em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:1.064108em;vertical-align:-0.25em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.13889em;\\\">T</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathit\\\">n</span><span class=\\\"mclose\\\">)</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2777777777777778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2777777777777778em;\\\"></span><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\"><span class=\\\"mord mathit\\\">n</span><span class=\\\"msupsub\\\"><span class=\\\"vlist-t\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.8141079999999999em;\\\"><span style=\\\"top:-3.063em;margin-right:0.05em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:2.7em;\\\"></span><span class=\\\"sizing reset-size6 size3 mtight\\\"><span class=\\\"mord mtight\\\">2</span></span></span></span></span></span></span></span><span class=\\\"mclose\\\">)</span></span></span></span></p>\\n<blockquote>\\n<p>其实这种情况，可以理解为和选择排序一样，只不过选择排序是我们有意选择一个最小数，而这种排序则是我们无意中选到了最大数（或最小数），但是我们却还做了很多无用的比较，快排要避免这种情况</p>\\n</blockquote>\\n<p>主元的选取上，由于我看的浙大MOOC上提到的是Median of Three的方法，所以我最开始以为这就是默认的，这种方法其实很难造成最糟糕情况，也是我们常用的方法</p>\\n<p>还有两种方法</p>\\n<ol>\\n<li>直接选取第一个元素，这是最差劲的方法，特别是待排序列有序程度高的情况下，这种方法最容易造成最糟糕复杂度情况，因为第一个元素很可能是最小（或者最大）的元素</li>\\n<li>随机数法，这种方法也比较常见，而且也不容易造成最糟糕情况</li>\\n</ol>\\n<p>主元选择逻辑对算法额外的性能影响</p>\\n<ul>\\n<li>随机数法生成随机数的开销</li>\\n<li>Median of Three中增加了比较次数（前中后三个元素进行比较）</li>\\n</ul>\\n<p>下面的代码我使用Median of Three，同时为了提高性能，在Median Three中不仅仅选出中位数，而且对前中后三个数基于大小交换了位置，最后，将中位数放到最后一个数的前一个（也就是倒数第二个），方便比较</p>\\n<p>JavaScript版本</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">quickSort</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">,</span> left<span class=\\\"token punctuation\\\">,</span> right<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>left <span class=\\\"token operator\\\">>=</span> right<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 边界考虑1</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">let</span> pivot <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">medianThree</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">,</span> left<span class=\\\"token punctuation\\\">,</span> right<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>pivot<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token keyword\\\">return</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 边界考虑2</span>\\n  <span class=\\\"token keyword\\\">let</span> i <span class=\\\"token operator\\\">=</span> left<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">let</span> j <span class=\\\"token operator\\\">=</span> right <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token punctuation\\\">;</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">[</span><span class=\\\"token operator\\\">++</span>i<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">&lt;</span> pivot<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">continue</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">[</span><span class=\\\"token operator\\\">--</span>j<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">></span> pivot<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token keyword\\\">continue</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>i <span class=\\\"token operator\\\">&lt;</span> j<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">swap</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">,</span> i<span class=\\\"token punctuation\\\">,</span> j<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">break</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token function\\\">swap</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">,</span> i<span class=\\\"token punctuation\\\">,</span> right <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token function\\\">quickSort</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">,</span> left<span class=\\\"token punctuation\\\">,</span> i <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token function\\\">quickSort</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">,</span> i <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> right<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">medianThree</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">,</span> left<span class=\\\"token punctuation\\\">,</span> right<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>left<span class=\\\"token operator\\\">+</span><span class=\\\"token number\\\">1</span> <span class=\\\"token operator\\\">===</span> right<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">[</span>left<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">></span> arr<span class=\\\"token punctuation\\\">[</span>right<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token function\\\">swap</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">,</span> left<span class=\\\"token punctuation\\\">,</span> right<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">return</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">let</span> center <span class=\\\"token operator\\\">=</span> Math<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">round</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>left <span class=\\\"token operator\\\">+</span> right<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">/</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">[</span>left<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">></span> arr<span class=\\\"token punctuation\\\">[</span>center<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">swap</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">,</span> left<span class=\\\"token punctuation\\\">,</span> center<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">[</span>left<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">></span> arr<span class=\\\"token punctuation\\\">[</span>right<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">swap</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">,</span> left<span class=\\\"token punctuation\\\">,</span> right<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">[</span>center<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">></span> arr<span class=\\\"token punctuation\\\">[</span>right<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">swap</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">,</span> center<span class=\\\"token punctuation\\\">,</span> right<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token function\\\">swap</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">,</span> center<span class=\\\"token punctuation\\\">,</span> right <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> arr<span class=\\\"token punctuation\\\">[</span>right <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">swap</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">,</span> a<span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> temp <span class=\\\"token operator\\\">=</span> arr<span class=\\\"token punctuation\\\">[</span>a<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  arr<span class=\\\"token punctuation\\\">[</span>a<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> arr<span class=\\\"token punctuation\\\">[</span>b<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  arr<span class=\\\"token punctuation\\\">[</span>b<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> temp<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h2 id=\\\"二、全排列\\\"><a href=\\\"#%E4%BA%8C%E3%80%81%E5%85%A8%E6%8E%92%E5%88%97\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>二、全排列</h2>\\n<p>全排列问题在笔试中出现过两三次，我这里想到的是最简单的递归方法</p>\\n<p>将字符串的每一个字符交换到第一个，再将其他部分全排列，使用第一个字符连接上后面全排列的所有可能字符串</p>\\n<p>时间复杂度分析</p>\\n<span class=\\\"katex-display\\\"><span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mi>T</mi><mo>(</mo><mi>n</mi><mo>)</mo><mo>=</mo><mrow><mo fence=\\\"true\\\">{</mo><mtable><mtr><mtd><mstyle scriptlevel=\\\"0\\\" displaystyle=\\\"false\\\"><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\\\"0\\\" displaystyle=\\\"false\\\"><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\\\"0\\\" displaystyle=\\\"false\\\"><mrow><mi>n</mi><mo>×</mo><mi>T</mi><mo>(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo>)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\\\"0\\\" displaystyle=\\\"false\\\"><mrow><mi>n</mi><mo>&gt;</mo><mn>1</mn></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding=\\\"application/x-tex\\\">T(n)=\\\\begin{cases}\\nO(1) &amp;n=1 \\\\\\\\\\nn\\\\times T(n-1) &amp;n&gt;1\\n\\\\end{cases}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:1.75em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:3.0000299999999998em;vertical-align:-1.25003em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.13889em;\\\">T</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathit\\\">n</span><span class=\\\"mclose\\\">)</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2777777777777778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2777777777777778em;\\\"></span><span class=\\\"minner\\\"><span class=\\\"mopen delimcenter\\\" style=\\\"top:0em;\\\"><span class=\\\"delimsizing size4\\\">{</span></span><span class=\\\"mord\\\"><span class=\\\"mtable\\\"><span class=\\\"col-align-l\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.69em;\\\"><span style=\\\"top:-3.69em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.008em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span></span></span><span style=\\\"top:-2.25em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.008em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathit\\\">n</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mbin\\\">×</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.13889em;\\\">T</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathit\\\">n</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.19em;\\\"></span></span></span></span><span class=\\\"arraycolsep\\\" style=\\\"width:1em;\\\"></span><span class=\\\"col-align-l\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.69em;\\\"><span style=\\\"top:-3.69em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.008em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathit\\\">n</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2777777777777778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2777777777777778em;\\\"></span><span class=\\\"mord\\\">1</span></span></span><span style=\\\"top:-2.25em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3.008em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathit\\\">n</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2777777777777778em;\\\"></span><span class=\\\"mrel\\\">&gt;</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2777777777777778em;\\\"></span><span class=\\\"mord\\\">1</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1.19em;\\\"></span></span></span></span></span></span><span class=\\\"mclose nulldelimiter\\\"></span></span></span></span></span></span>\\n<p>我们还是使用递推方程帮助我们思考并求解</p>\\n<span class=\\\"katex-display\\\"><span class=\\\"katex\\\"><span class=\\\"katex-mathml\\\"><math><semantics><mrow><mtable><mtr><mtd><mstyle scriptlevel=\\\"0\\\" displaystyle=\\\"true\\\"><mrow><mi>T</mi><mo>(</mo><mi>n</mi><mo>)</mo><mo>=</mo><mi>n</mi><mo>×</mo><mi>T</mi><mo>(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo>)</mo><mo>=</mo><mi>n</mi><mo>×</mo><mo>(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo>)</mo><mo>×</mo><mi mathvariant=\\\"normal\\\">.</mi><mi mathvariant=\\\"normal\\\">.</mi><mi mathvariant=\\\"normal\\\">.</mi><mo>×</mo><mn>2</mn><mo>×</mo><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo><mo>=</mo><mi>n</mi><mo>!</mo></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding=\\\"application/x-tex\\\">\\\\begin {aligned}\\nT(n)=n\\\\times T(n-1)=n\\\\times (n-1)\\\\times ...\\\\times 2\\\\times O(1)=n!\\n\\\\end {aligned}</annotation></semantics></math></span><span class=\\\"katex-html\\\" aria-hidden=\\\"true\\\"><span class=\\\"strut\\\" style=\\\"height:1em;\\\"></span><span class=\\\"strut bottom\\\" style=\\\"height:1.5000000000000002em;vertical-align:-0.5000000000000002em;\\\"></span><span class=\\\"base\\\"><span class=\\\"mord\\\"><span class=\\\"mtable\\\"><span class=\\\"col-align-r\\\"><span class=\\\"vlist-t vlist-t2\\\"><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:1em;\\\"><span style=\\\"top:-3.16em;\\\"><span class=\\\"pstrut\\\" style=\\\"height:3em;\\\"></span><span class=\\\"mord\\\"><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.13889em;\\\">T</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathit\\\">n</span><span class=\\\"mclose\\\">)</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2777777777777778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2777777777777778em;\\\"></span><span class=\\\"mord mathit\\\">n</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mbin\\\">×</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.13889em;\\\">T</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathit\\\">n</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2777777777777778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2777777777777778em;\\\"></span><span class=\\\"mord mathit\\\">n</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mbin\\\">×</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mopen\\\">(</span><span class=\\\"mord mathit\\\">n</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mbin\\\">−</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mbin\\\">×</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mord\\\">.</span><span class=\\\"mord\\\">.</span><span class=\\\"mord\\\">.</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mbin\\\">×</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mord\\\">2</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mbin\\\">×</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2222222222222222em;\\\"></span><span class=\\\"mord mathit\\\" style=\\\"margin-right:0.02778em;\\\">O</span><span class=\\\"mopen\\\">(</span><span class=\\\"mord\\\">1</span><span class=\\\"mclose\\\">)</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2777777777777778em;\\\"></span><span class=\\\"mrel\\\">=</span><span class=\\\"mord rule\\\" style=\\\"margin-right:0.2777777777777778em;\\\"></span><span class=\\\"mord mathit\\\">n</span><span class=\\\"mclose\\\">!</span></span></span></span><span class=\\\"vlist-s\\\">​</span></span><span class=\\\"vlist-r\\\"><span class=\\\"vlist\\\" style=\\\"height:0.5000000000000002em;\\\"></span></span></span></span></span></span></span></span></span></span>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">getAllPermutations1</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>str<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>str<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">||</span> str<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">===</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">[</span>str<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">let</span> strArr <span class=\\\"token operator\\\">=</span> Array<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">(</span>str<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">let</span> resArr <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  strArr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">forEach</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>v<span class=\\\"token punctuation\\\">,</span> i<span class=\\\"token punctuation\\\">,</span> arr<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">let</span> temp <span class=\\\"token operator\\\">=</span> arr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">slice</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">let</span> header <span class=\\\"token operator\\\">=</span> temp<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">splice</span><span class=\\\"token punctuation\\\">(</span>i<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token function\\\">permutation</span><span class=\\\"token punctuation\\\">(</span>temp<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">join</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">forEach</span><span class=\\\"token punctuation\\\">(</span>v <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      resArr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span>header<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>v<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">join</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> resArr<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>上网查找之后，还发现一种利用字典顺序的解法，先举一个例子，看这个解法的操作过程，假设求字符串<code class=\\\"language-text\\\">123</code>的全排列</p>\\n<blockquote>\\n<p>起点：<code class=\\\"language-text\\\">123</code>，终点：<code class=\\\"language-text\\\">321</code>，字典序的关键在于下一个排列基于前一个排列，且只比前一个排列大一点点。这个一点点的实现在于每次从倒数第二个元素开始，向后找比它刚好大一点的元素交换，交换之后，让该元素之后的部分元素升序排列，使得其排列刚好比前一个排列大一点点。如果向后找没找到，则从倒数第三个元素开始，以此类推。。。如果没懂，直接看下面一个例子。 </p>\\n<ol>\\n<li><code class=\\\"language-text\\\">123</code>中<code class=\\\"language-text\\\">2</code>向后找比它大一点点的元素<code class=\\\"language-text\\\">3</code>，交换为<code class=\\\"language-text\\\">132</code>，并将<code class=\\\"language-text\\\">3</code>之后部分元素升序排列，结果还是<code class=\\\"language-text\\\">132</code></li>\\n<li><code class=\\\"language-text\\\">132</code>中<code class=\\\"language-text\\\">3</code>向后没找到比它小的，则从<code class=\\\"language-text\\\">1</code>开始向后找，找到比它刚好大一点点的元素<code class=\\\"language-text\\\">2</code>，交换为<code class=\\\"language-text\\\">231</code>，再将<code class=\\\"language-text\\\">2</code>后面的部分元素升序排列为<code class=\\\"language-text\\\">213</code></li>\\n<li>...</li>\\n<li>最后到<code class=\\\"language-text\\\">321</code>，<code class=\\\"language-text\\\">3</code>后面找不到比它更大的元素了，此时循环结束，算法完成</li>\\n</ol>\\n</blockquote>\\n<p>总结出算法的过程如下</p>\\n<ol>\\n<li>对输入字符串先进行升序排列</li>\\n<li>升序序列作为起点</li>\\n<li>\\n<p>输入当前排列，根据当前排列计算出下一轮排列</p>\\n<ol>\\n<li>从当前排列的倒数第二个元素开始向后找一个刚好比它大的元素交换，交换后将它之后的部分元素升序排列，此时得到下一轮序列，返回即可</li>\\n<li>上面一步如果找不到则从倒数第三个元素开始，重复上面一步，以此类推</li>\\n<li>如果走到了第一个元素还找不到，说明该排列到达终点，算法结束</li>\\n</ol>\\n</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">getAllPermutations2</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>str<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> strArr <span class=\\\"token operator\\\">=</span> Array<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">(</span>str<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> resArr <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">let</span> temp <span class=\\\"token operator\\\">=</span> strArr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">sort</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  resArr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>temp<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  temp <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getNextPermutation</span><span class=\\\"token punctuation\\\">(</span>temp<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">while</span><span class=\\\"token punctuation\\\">(</span>temp<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    resArr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>temp<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    temp <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">getNextPermutation</span><span class=\\\"token punctuation\\\">(</span>temp<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>resArr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span>item <span class=\\\"token operator\\\">=></span> item<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">join</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// 根据前一个排列获得下一个排列</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">getNextPermutation</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>perm<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>perm<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token operator\\\">===</span><span class=\\\"token number\\\">0</span> <span class=\\\"token operator\\\">||</span> perm<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token operator\\\">===</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">let</span> len <span class=\\\"token operator\\\">=</span> perm<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">let</span> isFind <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">let</span> nextPerm <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">while</span><span class=\\\"token punctuation\\\">(</span>len <span class=\\\"token operator\\\">></span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">let</span> tempPerm <span class=\\\"token operator\\\">=</span> perm<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">slice</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    isFind <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">findAndSwap</span><span class=\\\"token punctuation\\\">(</span>tempPerm<span class=\\\"token punctuation\\\">,</span> len <span class=\\\"token operator\\\">-</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 从倒数第二个元素开始，向后找刚好比它大的元素</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>isFind<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      nextPerm <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">sort</span><span class=\\\"token punctuation\\\">(</span>tempPerm<span class=\\\"token punctuation\\\">,</span> len<span class=\\\"token operator\\\">-</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 如果找到，交换后将该元素后面的元素升序排列</span>\\n      <span class=\\\"token keyword\\\">return</span> nextPerm<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    len<span class=\\\"token operator\\\">--</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 没找到则向前一个元素，继续找</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// 将index及其之后的元素进行升序排列</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">sort</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">,</span> index<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> sortPart <span class=\\\"token operator\\\">=</span> arr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">splice</span><span class=\\\"token punctuation\\\">(</span>index<span class=\\\"token punctuation\\\">,</span> arr<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token operator\\\">-</span>index<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">sort</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token operator\\\">...</span>arr<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>sortPart<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// 从当前数(index)后面找一个刚好比它大的数，并交换位置，找到返回true，找不到false</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">findAndSwap</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">,</span> index<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// 一个元素不需要找，直接false</span>\\n  <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>index <span class=\\\"token operator\\\">&lt;</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">let</span> cur <span class=\\\"token operator\\\">=</span> index <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">let</span> nearstIndex <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">while</span><span class=\\\"token punctuation\\\">(</span>cur<span class=\\\"token operator\\\">!==</span>arr<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">[</span>cur<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">></span> arr<span class=\\\"token punctuation\\\">[</span>index<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// 第一次直接更新nearstIndex, 之后需要与之前的比较，更小则更新，否则不变</span>\\n      nearstIndex <span class=\\\"token operator\\\">=</span> <span class=\\\"token operator\\\">!</span>nearstIndex <span class=\\\"token operator\\\">?</span> cur <span class=\\\"token punctuation\\\">:</span> arr<span class=\\\"token punctuation\\\">[</span>cur<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">&lt;</span> arr<span class=\\\"token punctuation\\\">[</span>nearstIndex<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">?</span> cur <span class=\\\"token punctuation\\\">:</span> nearstIndex<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    cur<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>nearstIndex<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">let</span> temp <span class=\\\"token operator\\\">=</span> arr<span class=\\\"token punctuation\\\">[</span>nearstIndex<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    arr<span class=\\\"token punctuation\\\">[</span>nearstIndex<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> arr<span class=\\\"token punctuation\\\">[</span>index<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    arr<span class=\\\"token punctuation\\\">[</span>index<span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> temp<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">true</span><span class=\\\"token punctuation\\\">;</span> \\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token boolean\\\">false</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token function\\\">allPermutations</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'cbda'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\",\"frontmatter\":{\"title\":\"面试的那些题-算法篇\",\"date\":\"September 03, 2018\",\"excerpt\":\"最近想复习总结下面试中遇到的所有面试题，以及自己觉得可能出现的面试题，又或者是我觉得不错的需要掌握的知识。这是Master the FED Interviews系列的第三篇：关于算法\",\"contents\":[{\"text\":\"前言\",\"subContents\":null},{\"text\":\"一、排序算法\",\"subContents\":[{\"text\":\"1-选择排序\"},{\"text\":\"2-插入排序\"},{\"text\":\"扩展：插入排序和选择排序的比较\"},{\"text\":\"3-冒泡排序\"},{\"text\":\"4-归并排序\"},{\"text\":\"5-快速排序\"}]},{\"text\":\"二、全排列\",\"subContents\":null}]}}},\"pathContext\":{\"slug\":\"/learning/2018/09/03/Master-the-FED-Interviews-Algorithms/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/learning-2018-09-03-master-the-fed-interviews-algorithms.json\n// module id = 281\n// module chunks = 147766044081179"],"sourceRoot":""}