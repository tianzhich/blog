{"version":3,"sources":["webpack:///path---learning-2018-08-29-master-the-fed-interviews-java-script-14a15e89d46257534a0a.js","webpack:///./.cache/json/learning-2018-08-29-master-the-fed-interviews-java-script.json"],"names":["webpackJsonp","279","module","exports","data","markdownRemark","html","frontmatter","title","date","excerpt","contents","text","subContents","pathContext","slug"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA;AAAsxoEC,aAAgvBC,MAAA,aAAAC,KAAA,kBAAAC,QAAA,sGAAAC,WAA2KC,KAAA,KAAAC,YAAA,OAAiCD,KAAA,sBAAAC,YAAA,OAAkDD,KAAA,eAAAC,YAAA,OAA2CD,KAAA,iBAAAC,YAAA,OAA6CD,KAAA,cAAAC,YAAA,OAA0CD,KAAA,4BAAAC,YAAA,OAAwDD,KAAA,+BAAAC,YAAA,OAA2DD,KAAA,4BAAAC,YAAA,OAAwDD,KAAA,mBAAAC,YAAA,OAA+CD,KAAA,+BAAAC,YAAA,OAA2DD,KAAA,YAAAC,YAAA,OAAwCD,KAAA,qBAAAC,YAAA,UAAmDC,aAAgBC,KAAA","file":"path---learning-2018-08-29-master-the-fed-interviews-java-script-14a15e89d46257534a0a.js","sourcesContent":["webpackJsonp([117252040687834],{\n\n/***/ 279:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h3 id=\\\"前言\\\"><a href=\\\"#%E5%89%8D%E8%A8%80\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>前言</h3>\\n<p>秋招提前批已经基本结束了，即将进入金九银十，正式的号角已经打响。春招，以及秋招提前批一路过来，断断续续也面了一些公司，自己在笔记上也有总结，甚至自己进行过一些猜题。发现基本问到的问题八九不离十，但是有些知识，特别是偏工程的知识点，如果没遇到过，很难产生深刻的印象。结合自己之前的笔记，也想在正式进入9月之前，整理一个面试题集系列，加深理解</p>\\n<p>这是这个系列的第一篇，关于JavaScript</p>\\n<h3 id=\\\"一、null和undefined的区别\\\"><a href=\\\"#%E4%B8%80%E3%80%81null%E5%92%8Cundefined%E7%9A%84%E5%8C%BA%E5%88%AB\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>一、Null和Undefined的区别</h3>\\n<p>先执行一下基本类型检测</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">typeof</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">typeof</span> undefined<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// \\\"object\\\" \\\"undefined\\\"</span></code></pre>\\n      </div>\\n<p>从字面上看。两个值都表示某种东西的\\\"缺失\\\"。</p>\\n<p>将object数据类型进行true，false转换的时候，唯一一个为false的就是null，null表示的是引入对象的一种\\\"缺失\\\"，也可以说是空对象引用。最好理解的是，比如<code class=\\\"language-text\\\">document.getElementById(&#39;myEle&#39;)</code>，假设这个元素根本不存在，那么返回的就是null。</p>\\n<p>在JavaScript里面，null除非我们自己定义，然后就是上面提到的一种情况之外，我暂时没能想到还有哪里会隐式出现null。而undefined就不同，在console里面我见到最多的一个错误便是</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"shell\\\">\\n      <pre class=\\\"language-shell\\\"><code class=\\\"language-shell\\\">Uncaught TypeError: Cannot read property &#39;xxx&#39; of undefined</code></pre>\\n      </div>\\n<p>往往在于我们没有对拿到的值是否为undefined进行判断，进而在undefined上继续取下一个属性，从而抛出错误，从这一点来看，undefined不经意间出现还是挺多的，有下面几种常见情况</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// 1. 数组中访问'越界'的元素</span>\\n<span class=\\\"token keyword\\\">var</span> arr <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// undefined</span>\\n\\n<span class=\\\"token comment\\\">// 2. 对象中访问未定义的属性</span>\\n<span class=\\\"token keyword\\\">var</span> obj <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">.</span>b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// undefined</span>\\n\\n<span class=\\\"token comment\\\">// 3. 函数调用时参数没有提供完整，访问了未提供的参数</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">func</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span>b<span class=\\\"token punctuation\\\">,</span>c<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span>b<span class=\\\"token punctuation\\\">,</span>c<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> \\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token function\\\">func</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 1 2 undefined</span>\\n\\n<span class=\\\"token comment\\\">// 4. 变量声明后没有赋值</span>\\n<span class=\\\"token keyword\\\">var</span> a<span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// undefined</span>\\n\\n<span class=\\\"token comment\\\">// 5. 对没有赋值的变量(或者压根没有声明的变量)使用typeof类型检测</span>\\n<span class=\\\"token keyword\\\">var</span> a<span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">typeof</span> a<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">typeof</span> b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// \\\"undefined\\\" \\\"undefined\\\"</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 要注意这样会直接报错 \\\"Uncaught ReferenceError: b is not defined\\\"</span></code></pre>\\n      </div>\\n<p>由于undefined出现情况很多，而且大多都是我们不良编程习惯导致，或者是不经意间发生，所以我们一般不会显式把一个变量声明为undefined，这样会造成二义性，上面的第5点使用typeof进行类型检测就是二义性之一，还有一种二义性如下</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">var</span> obj1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> obj2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> color<span class=\\\"token punctuation\\\">:</span> undefined <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>obj1<span class=\\\"token punctuation\\\">.</span>color <span class=\\\"token operator\\\">===</span> obj2<span class=\\\"token punctuation\\\">.</span>color<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">/* do something */</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token comment\\\">// Don't do this!!!</span></code></pre>\\n      </div>\\n<p>所以我们习惯上初始化一个变量为null，而且使用全等操作符(避免相等操作符发生类型转换)</p>\\n<p>还需要知道，Undefined数据类型的唯一值就是undefined，Null数据类型的唯一值就是null</p>\\n<p>最后，关于JS中为什么要定义两种类型来表示\\\"缺失\\\"，以及他们的历史来源，建议读一下阮一峰老师的<a href=\\\"http://www.ruanyifeng.com/blog/2014/03/undefined-vs-null.html#comment-305647\\\">这篇文章</a>，评论处有一些讨论，我觉得还是挺有意思的</p>\\n<h3 id=\\\"二、js中有哪些数据类型\\\"><a href=\\\"#%E4%BA%8C%E3%80%81js%E4%B8%AD%E6%9C%89%E5%93%AA%E4%BA%9B%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>二、JS中有哪些数据类型</h3>\\n<p>首先我们要知道JS变量是松散类型的，可以保存任何数据类型</p>\\n<p>5中简单数据类型（也称基本数据类型）：Undefined, Null, Boolean, String, Number(后三种可以封装成为Object)</p>\\n<p>1种复杂数据类型：Object</p>\\n<p>ES6新数据类型：Symbol</p>\\n<p>使用typeof进行类型检测，有七种返回情况: \\\"undefined\\\", \\\"object\\\"(Array &#x26; null), \\\"boolean\\\", \\\"string\\\", \\\"number\\\", \\\"symbol\\\", \\\"function\\\"，值得注意以下几种特殊情况</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// 1. Number()是转换函数，返回值还是一个'number'，但是new Number()是调用构造函数，封装成一个对象</span>\\n<span class=\\\"token comment\\\">// Boolean和String也是如此</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">typeof</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Number</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">typeof</span> <span class=\\\"token function\\\">Number</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// \\\"object\\\" \\\"number\\\"</span>\\n\\n<span class=\\\"token comment\\\">// 2. function的几种特殊情况</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">func</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> b <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">func</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 构造函数式调用，会返回一个新的对象</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">typeof</span> func<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">typeof</span> a<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">typeof</span> b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// \\\"function\\\" \\\"function\\\" \\\"object\\\"</span></code></pre>\\n      </div>\\n<p>Boolean数据类型的转换规则（这个和题目无关，但是记住很有用）</p>\\n<table>\\n<thead>\\n<tr>\\n<th>数据类型</th>\\n<th>true</th>\\n<th>false</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>Boolean</td>\\n<td>true</td>\\n<td>false</td>\\n</tr>\\n<tr>\\n<td>String</td>\\n<td>任何非空字符串</td>\\n<td>\\\"\\\"(空字符串)</td>\\n</tr>\\n<tr>\\n<td>Number</td>\\n<td>任何非零数值（包括正负无穷）</td>\\n<td>0和NaN</td>\\n</tr>\\n<tr>\\n<td>Object</td>\\n<td>任何对象</td>\\n<td>null</td>\\n</tr>\\n<tr>\\n<td>Undefined</td>\\n<td>n/a（或N/A）,not applicable, 意思是“不适用”</td>\\n<td>undefined</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"三、array检测有几种方法\\\"><a href=\\\"#%E4%B8%89%E3%80%81array%E6%A3%80%E6%B5%8B%E6%9C%89%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>三、Array检测有几种方法</h3>\\n<ol>\\n<li>\\n<p>使用instanceof, 例如<code class=\\\"language-text\\\">console.log(arr instanceof Array) // true</code></p>\\n</li>\\n<li>\\n<p>使用自身的constructor属性, 例如<code class=\\\"language-text\\\">console.log(arr.constructor === Array) // true</code></p>\\n</li>\\n<li>\\n<p>使用ES6的<code class=\\\"language-text\\\">Array.isArray(arr)</code>检测</p>\\n</li>\\n<li>\\n<p>使用对象原生toString()方法判断：<code class=\\\"language-text\\\">Object.prototype.toString.call(arr) === &quot;[object Array]&quot;</code>，注意这里不是使用<code class=\\\"language-text\\\">Array.toString()</code>，这个方法会将数组里的元素调用<code class=\\\"language-text\\\">toString()</code>后的结果以\\\",\\\"为间隔拼接成字符串返回</p>\\n</li>\\n</ol>\\n<p>注意上面的前两种方法判断不同document或者iframe下的Array时会失败，因为跨iframe实例化的对象不能共享原型链，是不同的对象，所以最好的解决办法是自己结合后两个方法写一个判断数组的函数</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">const</span> isArray <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>Array<span class=\\\"token punctuation\\\">.</span>isArray<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> Array<span class=\\\"token punctuation\\\">.</span>isArray<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">var</span> arr <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>array<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> Object<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span>toString<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span>array<span class=\\\"token punctuation\\\">)</span> \\n      <span class=\\\"token operator\\\">===</span> Object<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span>toString<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> \\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<h3 id=\\\"四、对象属性遍历的方法\\\"><a href=\\\"#%E5%9B%9B%E3%80%81%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E9%81%8D%E5%8E%86%E7%9A%84%E6%96%B9%E6%B3%95\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>四、对象属性遍历的方法</h3>\\n<ol>\\n<li>使用<code class=\\\"language-text\\\">for(let prop in obj){}</code>可以遍历对象属性，这种方法既可以遍历自有属性也可以遍历继承自原型的属性，只要属性的<code class=\\\"language-text\\\">[[Enumerable]]</code>特性为<code class=\\\"language-text\\\">true</code>，对于直接在对象上定义的属性，这个特性默认为<code class=\\\"language-text\\\">true</code></li>\\n<li>如果只想遍历实例属性，可以使用<code class=\\\"language-text\\\">Object.keys(obj)</code>或者<code class=\\\"language-text\\\">Object.getOwnPropertyNames(obj)</code>，两者均返回一个数组，数组的每一项是obj的key值，在此基础上使用<code class=\\\"language-text\\\">forEach()</code>即可遍历。两者区别在于前者只会遍历可枚举的自身属性，而后者不可枚举的自身属性也能遍历</li>\\n<li>使用<code class=\\\"language-text\\\">Reflect.ownKeys(obj)</code>，该方法除了具有<code class=\\\"language-text\\\">getOwnPropertyNames()</code>功能外，还能遍历以Symbol作为key值的对象属性，而前面两种都不能遍历Symbol()</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">var</span> obj <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\nObject<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">defineProperty</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'c'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n  value<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span>\\n  enumerable<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nObject<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span>d <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">;</span>\\nobj<span class=\\\"token punctuation\\\">[</span><span class=\\\"token function\\\">Symbol</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">;</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keys</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [\\\"a\\\", \\\"b\\\"]</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getOwnPropertyNames</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [\\\"a\\\", \\\"b\\\", \\\"c\\\"]</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>Reflect<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ownKeys</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [\\\"a\\\", \\\"b\\\", \\\"c\\\", Symbol(1)]</span>\\n\\n<span class=\\\"token keyword\\\">var</span> forInKeys <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">for</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> key <span class=\\\"token keyword\\\">in</span> obj<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  forInKeys<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>key<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>forInKeys<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [\\\"a\\\", \\\"b\\\", \\\"d\\\"]</span></code></pre>\\n      </div>\\n<p>注意，使用<code class=\\\"language-text\\\">Reflect.ownKeys(obj)</code>相当于<code class=\\\"language-text\\\">Object.getOwnPropertyNames(obj).concat(Object.getOwnPropertySymbols(obj))</code></p>\\n<h3 id=\\\"五、javascript中0102为什么不等于03\\\"><a href=\\\"#%E4%BA%94%E3%80%81javascript%E4%B8%AD0102%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E7%AD%89%E4%BA%8E03\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>五、JavaScript中0.1+0.2为什么不等于0.3</h3>\\n<p>关于这个问题，我<a href=\\\"https://tianzhich.github.io/blog/learning/2018/08/17/js-01-02-not-equal-to-03/\\\">这篇文章</a>中已经进行了深入的探讨</p>\\n<h3 id=\\\"六、mouse-leave和mouse-out事件的区别\\\"><a href=\\\"#%E5%85%AD%E3%80%81mouse-leave%E5%92%8Cmouse-out%E4%BA%8B%E4%BB%B6%E7%9A%84%E5%8C%BA%E5%88%AB\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>六、mouse leave和mouse out事件的区别</h3>\\n<p>主要区别在于mouseleave事件不冒泡，而mouseout事件冒泡；类似的还有mouseenter和mouseover</p>\\n<iframe height='343' scrolling='no' title='mouseleave和mouseout的区别' src='//codepen.io/tianzhich/embed/mGOaPG/?height=343&theme-id=dark&default-tab=css,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/tianzhich/pen/mGOaPG/'>mouseleave和mouseout的区别</a> by Tian Zhi (<a href='https://codepen.io/tianzhich'>@tianzhich</a>) on <a href='https://codepen.io'>CodePen</a>.\\n</iframe>\\n<p>主要看外层的mouseout事件，完整地移动过外层div，会触发其mouseout三次</p>\\n<ol>\\n<li>第一次触发因为进入了内层，此时相当于移开了外层，被触发</li>\\n<li>第二次因为离开了内层，由于内层的mouseout事件冒泡，被触发</li>\\n<li>第三次因为真真实实离开了外层，被触发</li>\\n</ol>\\n<p>第一次触发一开始我不是很理解，查了MDN文档的相关解释才懂，下面三条加粗语句分别代表上述三种情况</p>\\n<blockquote>\\n<p>The mouseout event is fired when a pointing device (usually a mouse) is <strong>moved off the element</strong> that has the listener attached <strong>or off one of its children</strong>. Note that <strong>it is also triggered on the parent when you move onto a child element</strong>, since you move out of the visible space of the parent. </p>\\n</blockquote>\\n<h3 id=\\\"七、一个区域内的多张图片，怎么判断他们全部加载完成\\\"><a href=\\\"#%E4%B8%83%E3%80%81%E4%B8%80%E4%B8%AA%E5%8C%BA%E5%9F%9F%E5%86%85%E7%9A%84%E5%A4%9A%E5%BC%A0%E5%9B%BE%E7%89%87%EF%BC%8C%E6%80%8E%E4%B9%88%E5%88%A4%E6%96%AD%E4%BB%96%E4%BB%AC%E5%85%A8%E9%83%A8%E5%8A%A0%E8%BD%BD%E5%AE%8C%E6%88%90\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>七、一个区域内的多张图片，怎么判断他们全部加载完成</h3>\\n<p>当时还不知道Promise，甚至对异步也是一知半解的时候遇到这个问题，错的当然也是很离谱</p>\\n<p>使用Promise结合Promise.all()可以判断图片是否全部加载完成。我这里是使用创建img标签插入到DOM中判断，也可以在document.DOMContentLoaded()中判断已经在DOM节点中的img是否加载完成，道理类似</p>\\n<p>也可以直接在我的<a href=\\\"https://codepen.io/tianzhich/pen/MqbdXG\\\">CodePen</a>上运行</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">  <span class=\\\"token keyword\\\">const</span> imgUrls <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">loadImage</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>imgUrl<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">let</span> img <span class=\\\"token operator\\\">=</span> document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createElement</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'img'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    img<span class=\\\"token punctuation\\\">.</span>src <span class=\\\"token operator\\\">=</span> imgUrl<span class=\\\"token punctuation\\\">;</span>\\n    img<span class=\\\"token punctuation\\\">.</span>alt <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">;</span>\\n    img<span class=\\\"token punctuation\\\">.</span>height <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">300</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      img<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">onload</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"图片加载成功\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'container'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">appendChild</span><span class=\\\"token punctuation\\\">(</span>img<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n      img<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">onerror</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">reject</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"图片未能成功加载，请稍后重试！\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">loadAllImage</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>imgUrls<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> Promise<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">all</span><span class=\\\"token punctuation\\\">(</span>imgUrls<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>imgUrl<span class=\\\"token punctuation\\\">,</span> i<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">loadImage</span><span class=\\\"token punctuation\\\">(</span>imgUrl<span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>res <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`第</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>i <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">张</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>res<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> Promise<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">catch</span><span class=\\\"token punctuation\\\">(</span>err <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`第</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>i <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">张</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>err<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> Promise<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">loadAllImage</span><span class=\\\"token punctuation\\\">(</span>imgUrls<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"图片全部加载完毕\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<h3 id=\\\"八、xss是什么，怎么防止xss\\\"><a href=\\\"#%E5%85%AB%E3%80%81xss%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%8C%E6%80%8E%E4%B9%88%E9%98%B2%E6%AD%A2xss\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>八、XSS是什么，怎么防止XSS</h3>\\n<p>XSS(Cross-Site-Scripting)，跨站脚本攻击，也叫做脚本注入</p>\\n<p>当服务器完全信赖客户端提交的数据时，就可能发生脚本注入。例如，当用户提交表单时，提交了一段script代码，服务器将这段代码存储起来，下次其他用户访问时，这段代码被加载</p>\\n<p>在代码中我们可以获取用户cookie，并将其发送到我们自己的服务器，例如下面就是一段简单的脚本</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">var</span> cookie <span class=\\\"token operator\\\">=</span> document<span class=\\\"token punctuation\\\">.</span>cookie<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 获取cookie</span>\\n<span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createElement</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'a'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> \\na<span class=\\\"token punctuation\\\">.</span>href <span class=\\\"token operator\\\">=</span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`http://www.tianzhich.com/test.php?secret=</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>cookie<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">;</span>\\na<span class=\\\"token punctuation\\\">.</span>innerHTML <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"&lt;img src='./fake.jpg' alt=''/>\\\"</span> <span class=\\\"token comment\\\">// 伪装图片</span>\\ndocument<span class=\\\"token punctuation\\\">.</span>body<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">appendChild</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>当下次别的用户访问时，这段代码被记载，一旦用户不小心点击到伪装图片，cookie就会被发送到我们的主机</p>\\n<p>从上面来看，防治XSS有两种主要方式</p>\\n<ol>\\n<li>\\n<p><strong>防止特殊的字符出现</strong>，这些字符主要是对于HTML文档有特殊意义的字符</p>\\n<p>客户端表单数据值类型检测和验证</p>\\n<p>服务器对用户提交的表单数据进行严格验证</p>\\n<p>主要是将相应的符号转换成HTML实体字符，像<code class=\\\"language-text\\\">&lt;</code>或者<code class=\\\"language-text\\\">&gt;</code>这些字符是不允许出现在文本中的，因为他们对于HTML文档来说有特殊意义。如果我们要在HTML文档中展示这些字符，应该使用它们的转义字符，例如<code class=\\\"language-text\\\">&lt;</code>转义字符为<code class=\\\"language-text\\\">&amp;lt;</code>，所以客户端或者服务器应该将提交上来的这些字符进行编码，或者过滤掉这些字符</p>\\n</li>\\n<li>\\n<p>让服务器将重要的cookie标记为<code class=\\\"language-text\\\">http-only</code>，也就是在response header中设置\\n<code class=\\\"language-text\\\">set-cookie: xxx;HttpOnly</code></p>\\n</li>\\n</ol>\\n<p>这里分别使用jQuery和原生JS实现对特殊字符的加密和解密</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// jQuery</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">htmlEncoderJq</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>str<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">$</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'&lt;div>'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">text</span><span class=\\\"token punctuation\\\">(</span>str<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">html</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">htmlDecoderJq</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>str<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">$</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'&lt;div>'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">html</span><span class=\\\"token punctuation\\\">(</span>str<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">text</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\">// JS</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">htmlEncoderJs</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>str<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> div <span class=\\\"token operator\\\">=</span> document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createElement</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'div'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  div<span class=\\\"token punctuation\\\">.</span>textContent <span class=\\\"token operator\\\">=</span> str<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> div<span class=\\\"token punctuation\\\">.</span>innerHTML<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">htmlDecoderJs</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>str<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> div <span class=\\\"token operator\\\">=</span> document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createElement</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'div'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  div<span class=\\\"token punctuation\\\">.</span>innerHTML <span class=\\\"token operator\\\">=</span> str<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> div<span class=\\\"token punctuation\\\">.</span>textContent<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h3 id=\\\"九、js中定义变量的var-let-const有什么区别\\\"><a href=\\\"#%E4%B9%9D%E3%80%81js%E4%B8%AD%E5%AE%9A%E4%B9%89%E5%8F%98%E9%87%8F%E7%9A%84var-let-const%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>九、JS中定义变量的var, let, const有什么区别</h3>\\n<p><code class=\\\"language-text\\\">var</code>是ES5中定义变量的方式，定义的变量只有全局作用域和函数作用域之分</p>\\n<p>ES6引入了<code class=\\\"language-text\\\">let</code>和<code class=\\\"language-text\\\">const</code>，前者定义的变量有了块级作用域的概念。后者表示定义一个常量，这里的常量用C语言来说，类似于C的指针，定义一个指针为常量，只是说这个指针不能指向别的内存地址(不能指向别的对象)，但是其自身内存地址的内容是可以访问和修改的</p>\\n<h3 id=\\\"十、数组去重的方法\\\"><a href=\\\"#%E5%8D%81%E3%80%81%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%E7%9A%84%E6%96%B9%E6%B3%95\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>十、数组去重的方法</h3>\\n<p>数组去重的方式网上太多了，总结起来就三大类，首先直接遍历，不使用数组的其他方法；然后可以使用数组的方法进行去重，或者使用ES6的Set和Map数据结构；最后扩展一下，考虑下其他数据类型的去重结果</p>\\n<ol>\\n<li>使用原始方法</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">distinct</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> resArr <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> arr<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> cur <span class=\\\"token operator\\\">=</span> arr<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> j <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> j <span class=\\\"token operator\\\">&lt;</span> resArr<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> j<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>cur <span class=\\\"token operator\\\">===</span> resArr<span class=\\\"token punctuation\\\">[</span>j<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">break</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>j <span class=\\\"token operator\\\">===</span> resArr<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      resArr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>cur<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> resArr<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<ol start=\\\"2\\\">\\n<li>使用数组方法(splice)，会修改原数组</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">distinct</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> arr<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> cur <span class=\\\"token operator\\\">=</span> arr<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> j <span class=\\\"token operator\\\">=</span> i <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span> j <span class=\\\"token operator\\\">&lt;</span> arr<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> j<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>cur <span class=\\\"token operator\\\">===</span> arr<span class=\\\"token punctuation\\\">[</span>j<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        arr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">splice</span><span class=\\\"token punctuation\\\">(</span>j<span class=\\\"token operator\\\">--</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 数组长度动态变化，j记得减1</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> arr<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<ol start=\\\"3\\\">\\n<li>\\n<p>使用数组方法(indexOf+filter)</p>\\n<p>关于这两个方法也可以只用其一，搭配其他方法，或者自己写循环，但是原理差不多</p>\\n</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">distinct</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> arr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">filter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>v<span class=\\\"token punctuation\\\">,</span> k<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> arr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">indexOf</span><span class=\\\"token punctuation\\\">(</span>v<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">===</span>k<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<ol start=\\\"4\\\">\\n<li>\\n<p>使用数组方法(sort+filter)，会修改原数组</p>\\n<p>这两个方法也可以只选其一，搭配其他方法使用，或者自己写循环，但是原理差不多</p>\\n</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">distinct</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> arr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">sort</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">filter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>v<span class=\\\"token punctuation\\\">,</span> k<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> v<span class=\\\"token operator\\\">!==</span>arr<span class=\\\"token punctuation\\\">[</span>k<span class=\\\"token operator\\\">+</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<ol start=\\\"5\\\">\\n<li>ES6 Map(Map.prototype.set()返回原Map)</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">distinct</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> resMap <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> arr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">filter</span><span class=\\\"token punctuation\\\">(</span>v <span class=\\\"token operator\\\">=></span> <span class=\\\"token operator\\\">!</span>resMap<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">has</span><span class=\\\"token punctuation\\\">(</span>v<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">&amp;&amp;</span>resMap<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">set</span><span class=\\\"token punctuation\\\">(</span>v<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<ol start=\\\"6\\\">\\n<li>ES6 Set</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">distinct</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token operator\\\">...</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Set</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 或者 return Array.from(new Set(arr));</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<ol start=\\\"7\\\">\\n<li>其他数据类型使用上述方法去重的检验结果</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">var</span> arr <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'1'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'1'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">NaN</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">NaN</span><span class=\\\"token punctuation\\\">,</span>undefined<span class=\\\"token punctuation\\\">,</span><span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">String</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>undefined<span class=\\\"token punctuation\\\">,</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">String</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<table>\\n<thead>\\n<tr>\\n<th>方法</th>\\n<th>结果</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>原始方法</td>\\n<td><code class=\\\"language-text\\\">NaN</code>\\n和\\n<code class=\\\"language-text\\\">String {&quot;1&quot;}</code>\\n不能去重</td>\\n</tr>\\n<tr>\\n<td>splice</td>\\n<td><code class=\\\"language-text\\\">NaN</code>\\n和\\n<code class=\\\"language-text\\\">String {&quot;1&quot;}</code>\\n不能去重，\\n<code class=\\\"language-text\\\">undefined</code>\\n为\\n<code class=\\\"language-text\\\">empty</code></td>\\n</tr>\\n<tr>\\n<td>filter+indexOf</td>\\n<td><code class=\\\"language-text\\\">String {&quot;1&quot;}</code>\\n不能去重，\\n<code class=\\\"language-text\\\">NaN</code>\\n全被过滤</td>\\n</tr>\\n<tr>\\n<td>filter+sort</td>\\n<td><code class=\\\"language-text\\\">NaN</code>\\n不能去重，\\n<code class=\\\"language-text\\\">undefined</code>\\n全被过滤，\\n<code class=\\\"language-text\\\">1, String {&quot;1&quot;}, &quot;1&quot;</code>\\n无法正确判断</td>\\n</tr>\\n<tr>\\n<td>Map</td>\\n<td><code class=\\\"language-text\\\">String {&quot;1&quot;}</code>\\n不能去重</td>\\n</tr>\\n<tr>\\n<td>Set</td>\\n<td><code class=\\\"language-text\\\">String {&quot;1&quot;}</code>\\n不能去重</td>\\n</tr>\\n</tbody>\\n</table>\\n<p>   以上的结果只要关注几个点</p>\\n<ol>\\n<li>\\n<p><code class=\\\"language-text\\\">new String {&quot;1&quot;}</code>和<code class=\\\"language-text\\\">new String {&quot;1&quot;}</code>并不是同一个对象，如果非要把他们当成同一对象，我们可以使用对象的<code class=\\\"language-text\\\">hasOwnProperty(typeof arr[i] + arr[i])</code>来判断，如果没有就新增一个key，但是我还是认为上面的两个是不同的对象实例</p>\\n</li>\\n<li>\\n<p>要注意<code class=\\\"language-text\\\">console.log(NaN===NaN) // false</code>，所以造成有些方法不能去重，有些筛选机制直接过滤，但是在Map和Set中，即使这两个不相等，但是会把他们当成相同的东西看待</p>\\n</li>\\n<li>\\n<p>最后就是sort方法，MDN给出的解释非常详细</p>\\n<blockquote>\\n<p>The <strong><code class=\\\"language-text\\\">sort()</code></strong> method sorts the elements of an array <em>in place</em> and returns the array. The sort is not necessarily stable. The default sort order is according to string Unicode code points.</p>\\n</blockquote>\\n<p>  <code class=\\\"language-text\\\">sort()</code>对于<code class=\\\"language-text\\\">1, String{&quot;1&quot;}, &quot;1&quot;</code>来说是一视同仁的，因此在此基础上使用<code class=\\\"language-text\\\">filter()</code>判断时和三者在原数组中的顺序有关。不能准确去重</p>\\n</li>\\n</ol>\\n<h3 id=\\\"十一、dom节点的深度遍历和广度遍历\\\"><a href=\\\"#%E5%8D%81%E4%B8%80%E3%80%81dom%E8%8A%82%E7%82%B9%E7%9A%84%E6%B7%B1%E5%BA%A6%E9%81%8D%E5%8E%86%E5%92%8C%E5%B9%BF%E5%BA%A6%E9%81%8D%E5%8E%86\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>十一、DOM节点的深度遍历和广度遍历</h3>\\n<p>广度遍历（BFS）比较简单，类似于二叉树的层次遍历，使用队列模拟当前一层，每出队列一个节点，则将其加入到最终结果数组里，并且将其的子节点全部入队，直到队列为空</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// BFS</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">travelsalBFS</span><span class=\\\"token punctuation\\\">(</span>root<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> tempArr <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">var</span> resArr <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  tempArr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>root<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>tempArr<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">let</span> len <span class=\\\"token operator\\\">=</span> tempArr<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>len<span class=\\\"token operator\\\">--</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">let</span> tempNode <span class=\\\"token operator\\\">=</span> tempArr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">shift</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      resArr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>tempNode<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>tempNode<span class=\\\"token punctuation\\\">.</span>children<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        tempArr <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token operator\\\">...</span>tempArr<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>Array<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">(</span>tempNode<span class=\\\"token punctuation\\\">.</span>children<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> resArr<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>当然，我们也可以不出队列，只入队列，使用<code class=\\\"language-text\\\">index</code>记录下当前访问到的节点，每访问完就将其子节点全部入队，直到全部节点都被访问</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// BFS 不使用临时array</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">travelsalBFS2</span><span class=\\\"token punctuation\\\">(</span>root<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> resArr <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  resArr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>root<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">var</span> index<span class=\\\"token operator\\\">=</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">while</span><span class=\\\"token punctuation\\\">(</span>resArr<span class=\\\"token punctuation\\\">[</span>index<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    resArr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">...</span>Array<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">(</span>resArr<span class=\\\"token punctuation\\\">[</span>index<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span>children<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> resArr<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>深度遍历稍微复杂一点，我想到的是从根节点开始，每次访问其第一个子节点，直到某个节点没有子节点，此时将该元素从临时数组<code class=\\\"language-text\\\">pop</code>出来，访问其兄弟节点（如果访问不到则继续<code class=\\\"language-text\\\">pop</code>），直到访问到一个存在的兄弟节点，并把它作为当前节点，重复步骤。那么何时结束呢？刚才说到访问不到兄弟节点会一直<code class=\\\"language-text\\\">pop</code>，当把第一个根节点pop出来的时候，也就访问完毕了，可以返回结果数组</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// DFS</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">travelsalDFS</span><span class=\\\"token punctuation\\\">(</span>root<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> tempArr <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>root<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">var</span> resArr <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>root<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">var</span> curEle <span class=\\\"token operator\\\">=</span> root<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">while</span><span class=\\\"token punctuation\\\">(</span>tempArr<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">||</span> curEle<span class=\\\"token punctuation\\\">.</span>children<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">!==</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>curEle<span class=\\\"token punctuation\\\">.</span>children<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token operator\\\">===</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      curEle <span class=\\\"token operator\\\">=</span> tempArr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pop</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">while</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>curEle<span class=\\\"token punctuation\\\">.</span>nextElementSibling<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        curEle <span class=\\\"token operator\\\">=</span> tempArr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pop</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token comment\\\">// 这个地方，如果回到root，则遍历完毕！</span>\\n        <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>curEle <span class=\\\"token operator\\\">||</span> curEle <span class=\\\"token operator\\\">===</span> root<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n          <span class=\\\"token keyword\\\">return</span> resArr<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n      curEle <span class=\\\"token operator\\\">=</span> curEle<span class=\\\"token punctuation\\\">.</span>nextElementSibling<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n      curEle <span class=\\\"token operator\\\">=</span> curEle<span class=\\\"token punctuation\\\">.</span>firstElementChild<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token comment\\\">// 访问到的节点都要存起来，不同的是临时数组会pop出去，从而向上返回</span>\\n    resArr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>curEle<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    tempArr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>curEle<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>关于节点访问，我这里为了简单起见都称作节点了。但是要记住DOM元素和DOM节点是不同的，准确来说以上的应该都是DOM元素，因为DOM节点还包括了文本节点，注释节点等等</p>\\n<p>要注意<code class=\\\"language-text\\\">children</code>和<code class=\\\"language-text\\\">childNodes</code>，<code class=\\\"language-text\\\">firstElementChild</code>和<code class=\\\"language-text\\\">firstChild</code>，<code class=\\\"language-text\\\">nextElementSibling</code>和<code class=\\\"language-text\\\">nextSibling</code>的区别，前者访问到的是元素，例如<code class=\\\"language-text\\\">children</code>返回的是<code class=\\\"language-text\\\">HTML Collection</code>。后者访问到的是节点，例如<code class=\\\"language-text\\\">childNodes</code>返回的是<code class=\\\"language-text\\\">NodeList</code>，这两种类型都是类数组类型，可以使用<code class=\\\"language-text\\\">Array.from</code>转换成数组</p>\",\"frontmatter\":{\"title\":\"面试的那些题-JS篇\",\"date\":\"August 29, 2018\",\"excerpt\":\"最近想复习总结下面试中遇到的所有面试题，以及自己觉得可能出现的面试题，又或者是我觉得不错的需要掌握的知识。这是Master the FED Interviews系列的第一篇：关于JavaScript\",\"contents\":[{\"text\":\"前言\",\"subContents\":null},{\"text\":\"一、null和undefined的区别\",\"subContents\":null},{\"text\":\"二、js中有哪些数据类型\",\"subContents\":null},{\"text\":\"三、array检测有几种方法\",\"subContents\":null},{\"text\":\"四、对象属性遍历的方法\",\"subContents\":null},{\"text\":\"五、javascript中0102为什么不等于03\",\"subContents\":null},{\"text\":\"六、mouse-leave和mouse-out事件的区别\",\"subContents\":null},{\"text\":\"七、一个区域内的多张图片，怎么判断他们全部加载完成\",\"subContents\":null},{\"text\":\"八、xss是什么，怎么防止xss\",\"subContents\":null},{\"text\":\"九、js中定义变量的var-let-const有什么区别\",\"subContents\":null},{\"text\":\"十、数组去重的方法\",\"subContents\":null},{\"text\":\"十一、dom节点的深度遍历和广度遍历\",\"subContents\":null}]}}},\"pathContext\":{\"slug\":\"/learning/2018/08/29/Master-the-FED-Interviews-JavaScript/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---learning-2018-08-29-master-the-fed-interviews-java-script-14a15e89d46257534a0a.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h3 id=\\\"前言\\\"><a href=\\\"#%E5%89%8D%E8%A8%80\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>前言</h3>\\n<p>秋招提前批已经基本结束了，即将进入金九银十，正式的号角已经打响。春招，以及秋招提前批一路过来，断断续续也面了一些公司，自己在笔记上也有总结，甚至自己进行过一些猜题。发现基本问到的问题八九不离十，但是有些知识，特别是偏工程的知识点，如果没遇到过，很难产生深刻的印象。结合自己之前的笔记，也想在正式进入9月之前，整理一个面试题集系列，加深理解</p>\\n<p>这是这个系列的第一篇，关于JavaScript</p>\\n<h3 id=\\\"一、null和undefined的区别\\\"><a href=\\\"#%E4%B8%80%E3%80%81null%E5%92%8Cundefined%E7%9A%84%E5%8C%BA%E5%88%AB\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>一、Null和Undefined的区别</h3>\\n<p>先执行一下基本类型检测</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">typeof</span> <span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">typeof</span> undefined<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// \\\"object\\\" \\\"undefined\\\"</span></code></pre>\\n      </div>\\n<p>从字面上看。两个值都表示某种东西的\\\"缺失\\\"。</p>\\n<p>将object数据类型进行true，false转换的时候，唯一一个为false的就是null，null表示的是引入对象的一种\\\"缺失\\\"，也可以说是空对象引用。最好理解的是，比如<code class=\\\"language-text\\\">document.getElementById(&#39;myEle&#39;)</code>，假设这个元素根本不存在，那么返回的就是null。</p>\\n<p>在JavaScript里面，null除非我们自己定义，然后就是上面提到的一种情况之外，我暂时没能想到还有哪里会隐式出现null。而undefined就不同，在console里面我见到最多的一个错误便是</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"shell\\\">\\n      <pre class=\\\"language-shell\\\"><code class=\\\"language-shell\\\">Uncaught TypeError: Cannot read property &#39;xxx&#39; of undefined</code></pre>\\n      </div>\\n<p>往往在于我们没有对拿到的值是否为undefined进行判断，进而在undefined上继续取下一个属性，从而抛出错误，从这一点来看，undefined不经意间出现还是挺多的，有下面几种常见情况</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// 1. 数组中访问'越界'的元素</span>\\n<span class=\\\"token keyword\\\">var</span> arr <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// undefined</span>\\n\\n<span class=\\\"token comment\\\">// 2. 对象中访问未定义的属性</span>\\n<span class=\\\"token keyword\\\">var</span> obj <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">.</span>b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// undefined</span>\\n\\n<span class=\\\"token comment\\\">// 3. 函数调用时参数没有提供完整，访问了未提供的参数</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">func</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span>b<span class=\\\"token punctuation\\\">,</span>c<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">,</span>b<span class=\\\"token punctuation\\\">,</span>c<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> \\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token function\\\">func</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 1 2 undefined</span>\\n\\n<span class=\\\"token comment\\\">// 4. 变量声明后没有赋值</span>\\n<span class=\\\"token keyword\\\">var</span> a<span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// undefined</span>\\n\\n<span class=\\\"token comment\\\">// 5. 对没有赋值的变量(或者压根没有声明的变量)使用typeof类型检测</span>\\n<span class=\\\"token keyword\\\">var</span> a<span class=\\\"token punctuation\\\">;</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">typeof</span> a<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">typeof</span> b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// \\\"undefined\\\" \\\"undefined\\\"</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 要注意这样会直接报错 \\\"Uncaught ReferenceError: b is not defined\\\"</span></code></pre>\\n      </div>\\n<p>由于undefined出现情况很多，而且大多都是我们不良编程习惯导致，或者是不经意间发生，所以我们一般不会显式把一个变量声明为undefined，这样会造成二义性，上面的第5点使用typeof进行类型检测就是二义性之一，还有一种二义性如下</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">var</span> obj1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> obj2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> color<span class=\\\"token punctuation\\\">:</span> undefined <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>obj1<span class=\\\"token punctuation\\\">.</span>color <span class=\\\"token operator\\\">===</span> obj2<span class=\\\"token punctuation\\\">.</span>color<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span> <span class=\\\"token comment\\\">/* do something */</span> <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token comment\\\">// Don't do this!!!</span></code></pre>\\n      </div>\\n<p>所以我们习惯上初始化一个变量为null，而且使用全等操作符(避免相等操作符发生类型转换)</p>\\n<p>还需要知道，Undefined数据类型的唯一值就是undefined，Null数据类型的唯一值就是null</p>\\n<p>最后，关于JS中为什么要定义两种类型来表示\\\"缺失\\\"，以及他们的历史来源，建议读一下阮一峰老师的<a href=\\\"http://www.ruanyifeng.com/blog/2014/03/undefined-vs-null.html#comment-305647\\\">这篇文章</a>，评论处有一些讨论，我觉得还是挺有意思的</p>\\n<h3 id=\\\"二、js中有哪些数据类型\\\"><a href=\\\"#%E4%BA%8C%E3%80%81js%E4%B8%AD%E6%9C%89%E5%93%AA%E4%BA%9B%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>二、JS中有哪些数据类型</h3>\\n<p>首先我们要知道JS变量是松散类型的，可以保存任何数据类型</p>\\n<p>5中简单数据类型（也称基本数据类型）：Undefined, Null, Boolean, String, Number(后三种可以封装成为Object)</p>\\n<p>1种复杂数据类型：Object</p>\\n<p>ES6新数据类型：Symbol</p>\\n<p>使用typeof进行类型检测，有七种返回情况: \\\"undefined\\\", \\\"object\\\"(Array &#x26; null), \\\"boolean\\\", \\\"string\\\", \\\"number\\\", \\\"symbol\\\", \\\"function\\\"，值得注意以下几种特殊情况</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"js\\\">\\n      <pre class=\\\"language-js\\\"><code class=\\\"language-js\\\"><span class=\\\"token comment\\\">// 1. Number()是转换函数，返回值还是一个'number'，但是new Number()是调用构造函数，封装成一个对象</span>\\n<span class=\\\"token comment\\\">// Boolean和String也是如此</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">typeof</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Number</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">typeof</span> <span class=\\\"token function\\\">Number</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// \\\"object\\\" \\\"number\\\"</span>\\n\\n<span class=\\\"token comment\\\">// 2. function的几种特殊情况</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">func</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">var</span> b <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">func</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 构造函数式调用，会返回一个新的对象</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">typeof</span> func<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">typeof</span> a<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">typeof</span> b<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// \\\"function\\\" \\\"function\\\" \\\"object\\\"</span></code></pre>\\n      </div>\\n<p>Boolean数据类型的转换规则（这个和题目无关，但是记住很有用）</p>\\n<table>\\n<thead>\\n<tr>\\n<th>数据类型</th>\\n<th>true</th>\\n<th>false</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>Boolean</td>\\n<td>true</td>\\n<td>false</td>\\n</tr>\\n<tr>\\n<td>String</td>\\n<td>任何非空字符串</td>\\n<td>\\\"\\\"(空字符串)</td>\\n</tr>\\n<tr>\\n<td>Number</td>\\n<td>任何非零数值（包括正负无穷）</td>\\n<td>0和NaN</td>\\n</tr>\\n<tr>\\n<td>Object</td>\\n<td>任何对象</td>\\n<td>null</td>\\n</tr>\\n<tr>\\n<td>Undefined</td>\\n<td>n/a（或N/A）,not applicable, 意思是“不适用”</td>\\n<td>undefined</td>\\n</tr>\\n</tbody>\\n</table>\\n<h3 id=\\\"三、array检测有几种方法\\\"><a href=\\\"#%E4%B8%89%E3%80%81array%E6%A3%80%E6%B5%8B%E6%9C%89%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>三、Array检测有几种方法</h3>\\n<ol>\\n<li>\\n<p>使用instanceof, 例如<code class=\\\"language-text\\\">console.log(arr instanceof Array) // true</code></p>\\n</li>\\n<li>\\n<p>使用自身的constructor属性, 例如<code class=\\\"language-text\\\">console.log(arr.constructor === Array) // true</code></p>\\n</li>\\n<li>\\n<p>使用ES6的<code class=\\\"language-text\\\">Array.isArray(arr)</code>检测</p>\\n</li>\\n<li>\\n<p>使用对象原生toString()方法判断：<code class=\\\"language-text\\\">Object.prototype.toString.call(arr) === &quot;[object Array]&quot;</code>，注意这里不是使用<code class=\\\"language-text\\\">Array.toString()</code>，这个方法会将数组里的元素调用<code class=\\\"language-text\\\">toString()</code>后的结果以\\\",\\\"为间隔拼接成字符串返回</p>\\n</li>\\n</ol>\\n<p>注意上面的前两种方法判断不同document或者iframe下的Array时会失败，因为跨iframe实例化的对象不能共享原型链，是不同的对象，所以最好的解决办法是自己结合后两个方法写一个判断数组的函数</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">const</span> isArray <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>Array<span class=\\\"token punctuation\\\">.</span>isArray<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> Array<span class=\\\"token punctuation\\\">.</span>isArray<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">var</span> arr <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>array<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> Object<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span>toString<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span>array<span class=\\\"token punctuation\\\">)</span> \\n      <span class=\\\"token operator\\\">===</span> Object<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span>toString<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">call</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> \\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<h3 id=\\\"四、对象属性遍历的方法\\\"><a href=\\\"#%E5%9B%9B%E3%80%81%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E9%81%8D%E5%8E%86%E7%9A%84%E6%96%B9%E6%B3%95\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>四、对象属性遍历的方法</h3>\\n<ol>\\n<li>使用<code class=\\\"language-text\\\">for(let prop in obj){}</code>可以遍历对象属性，这种方法既可以遍历自有属性也可以遍历继承自原型的属性，只要属性的<code class=\\\"language-text\\\">[[Enumerable]]</code>特性为<code class=\\\"language-text\\\">true</code>，对于直接在对象上定义的属性，这个特性默认为<code class=\\\"language-text\\\">true</code></li>\\n<li>如果只想遍历实例属性，可以使用<code class=\\\"language-text\\\">Object.keys(obj)</code>或者<code class=\\\"language-text\\\">Object.getOwnPropertyNames(obj)</code>，两者均返回一个数组，数组的每一项是obj的key值，在此基础上使用<code class=\\\"language-text\\\">forEach()</code>即可遍历。两者区别在于前者只会遍历可枚举的自身属性，而后者不可枚举的自身属性也能遍历</li>\\n<li>使用<code class=\\\"language-text\\\">Reflect.ownKeys(obj)</code>，该方法除了具有<code class=\\\"language-text\\\">getOwnPropertyNames()</code>功能外，还能遍历以Symbol作为key值的对象属性，而前面两种都不能遍历Symbol()</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">var</span> obj <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span> a<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> b<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">2</span> <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\nObject<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">defineProperty</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'c'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span>\\n  value<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span>\\n  enumerable<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token boolean\\\">false</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\nObject<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span>d <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">4</span><span class=\\\"token punctuation\\\">;</span>\\nobj<span class=\\\"token punctuation\\\">[</span><span class=\\\"token function\\\">Symbol</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">]</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">;</span>\\n\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">keys</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [\\\"a\\\", \\\"b\\\"]</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>Object<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getOwnPropertyNames</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [\\\"a\\\", \\\"b\\\", \\\"c\\\"]</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>Reflect<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">ownKeys</span><span class=\\\"token punctuation\\\">(</span>obj<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [\\\"a\\\", \\\"b\\\", \\\"c\\\", Symbol(1)]</span>\\n\\n<span class=\\\"token keyword\\\">var</span> forInKeys <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">for</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">let</span> key <span class=\\\"token keyword\\\">in</span> obj<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  forInKeys<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>key<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\nconsole<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span>forInKeys<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// [\\\"a\\\", \\\"b\\\", \\\"d\\\"]</span></code></pre>\\n      </div>\\n<p>注意，使用<code class=\\\"language-text\\\">Reflect.ownKeys(obj)</code>相当于<code class=\\\"language-text\\\">Object.getOwnPropertyNames(obj).concat(Object.getOwnPropertySymbols(obj))</code></p>\\n<h3 id=\\\"五、javascript中0102为什么不等于03\\\"><a href=\\\"#%E4%BA%94%E3%80%81javascript%E4%B8%AD0102%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E7%AD%89%E4%BA%8E03\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>五、JavaScript中0.1+0.2为什么不等于0.3</h3>\\n<p>关于这个问题，我<a href=\\\"https://tianzhich.github.io/blog/learning/2018/08/17/js-01-02-not-equal-to-03/\\\">这篇文章</a>中已经进行了深入的探讨</p>\\n<h3 id=\\\"六、mouse-leave和mouse-out事件的区别\\\"><a href=\\\"#%E5%85%AD%E3%80%81mouse-leave%E5%92%8Cmouse-out%E4%BA%8B%E4%BB%B6%E7%9A%84%E5%8C%BA%E5%88%AB\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>六、mouse leave和mouse out事件的区别</h3>\\n<p>主要区别在于mouseleave事件不冒泡，而mouseout事件冒泡；类似的还有mouseenter和mouseover</p>\\n<iframe height='343' scrolling='no' title='mouseleave和mouseout的区别' src='//codepen.io/tianzhich/embed/mGOaPG/?height=343&theme-id=dark&default-tab=css,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='https://codepen.io/tianzhich/pen/mGOaPG/'>mouseleave和mouseout的区别</a> by Tian Zhi (<a href='https://codepen.io/tianzhich'>@tianzhich</a>) on <a href='https://codepen.io'>CodePen</a>.\\n</iframe>\\n<p>主要看外层的mouseout事件，完整地移动过外层div，会触发其mouseout三次</p>\\n<ol>\\n<li>第一次触发因为进入了内层，此时相当于移开了外层，被触发</li>\\n<li>第二次因为离开了内层，由于内层的mouseout事件冒泡，被触发</li>\\n<li>第三次因为真真实实离开了外层，被触发</li>\\n</ol>\\n<p>第一次触发一开始我不是很理解，查了MDN文档的相关解释才懂，下面三条加粗语句分别代表上述三种情况</p>\\n<blockquote>\\n<p>The mouseout event is fired when a pointing device (usually a mouse) is <strong>moved off the element</strong> that has the listener attached <strong>or off one of its children</strong>. Note that <strong>it is also triggered on the parent when you move onto a child element</strong>, since you move out of the visible space of the parent. </p>\\n</blockquote>\\n<h3 id=\\\"七、一个区域内的多张图片，怎么判断他们全部加载完成\\\"><a href=\\\"#%E4%B8%83%E3%80%81%E4%B8%80%E4%B8%AA%E5%8C%BA%E5%9F%9F%E5%86%85%E7%9A%84%E5%A4%9A%E5%BC%A0%E5%9B%BE%E7%89%87%EF%BC%8C%E6%80%8E%E4%B9%88%E5%88%A4%E6%96%AD%E4%BB%96%E4%BB%AC%E5%85%A8%E9%83%A8%E5%8A%A0%E8%BD%BD%E5%AE%8C%E6%88%90\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>七、一个区域内的多张图片，怎么判断他们全部加载完成</h3>\\n<p>当时还不知道Promise，甚至对异步也是一知半解的时候遇到这个问题，错的当然也是很离谱</p>\\n<p>使用Promise结合Promise.all()可以判断图片是否全部加载完成。我这里是使用创建img标签插入到DOM中判断，也可以在document.DOMContentLoaded()中判断已经在DOM节点中的img是否加载完成，道理类似</p>\\n<p>也可以直接在我的<a href=\\\"https://codepen.io/tianzhich/pen/MqbdXG\\\">CodePen</a>上运行</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\">  <span class=\\\"token keyword\\\">const</span> imgUrls <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">loadImage</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>imgUrl<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">let</span> img <span class=\\\"token operator\\\">=</span> document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createElement</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'img'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    img<span class=\\\"token punctuation\\\">.</span>src <span class=\\\"token operator\\\">=</span> imgUrl<span class=\\\"token punctuation\\\">;</span>\\n    img<span class=\\\"token punctuation\\\">.</span>alt <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">''</span><span class=\\\"token punctuation\\\">;</span>\\n    img<span class=\\\"token punctuation\\\">.</span>height <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">300</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Promise</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>resolve<span class=\\\"token punctuation\\\">,</span> reject<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      img<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">onload</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"图片加载成功\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'container'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">appendChild</span><span class=\\\"token punctuation\\\">(</span>img<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n      img<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">onerror</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token function\\\">reject</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"图片未能成功加载，请稍后重试！\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">loadAllImage</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>imgUrls<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> Promise<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">all</span><span class=\\\"token punctuation\\\">(</span>imgUrls<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>imgUrl<span class=\\\"token punctuation\\\">,</span> i<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token function\\\">loadImage</span><span class=\\\"token punctuation\\\">(</span>imgUrl<span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span>res <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`第</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>i <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">张</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>res<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> Promise<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">catch</span><span class=\\\"token punctuation\\\">(</span>err <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n        console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`第</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>i <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">张</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>err<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token keyword\\\">return</span> Promise<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">resolve</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">loadAllImage</span><span class=\\\"token punctuation\\\">(</span>imgUrls<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">then</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"图片全部加载完毕\\\"</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<h3 id=\\\"八、xss是什么，怎么防止xss\\\"><a href=\\\"#%E5%85%AB%E3%80%81xss%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%8C%E6%80%8E%E4%B9%88%E9%98%B2%E6%AD%A2xss\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>八、XSS是什么，怎么防止XSS</h3>\\n<p>XSS(Cross-Site-Scripting)，跨站脚本攻击，也叫做脚本注入</p>\\n<p>当服务器完全信赖客户端提交的数据时，就可能发生脚本注入。例如，当用户提交表单时，提交了一段script代码，服务器将这段代码存储起来，下次其他用户访问时，这段代码被加载</p>\\n<p>在代码中我们可以获取用户cookie，并将其发送到我们自己的服务器，例如下面就是一段简单的脚本</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">var</span> cookie <span class=\\\"token operator\\\">=</span> document<span class=\\\"token punctuation\\\">.</span>cookie<span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 获取cookie</span>\\n<span class=\\\"token keyword\\\">var</span> a <span class=\\\"token operator\\\">=</span> document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createElement</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'a'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> \\na<span class=\\\"token punctuation\\\">.</span>href <span class=\\\"token operator\\\">=</span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`http://www.tianzhich.com/test.php?secret=</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>cookie<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">`</span></span><span class=\\\"token punctuation\\\">;</span>\\na<span class=\\\"token punctuation\\\">.</span>innerHTML <span class=\\\"token operator\\\">=</span> <span class=\\\"token string\\\">\\\"&lt;img src='./fake.jpg' alt=''/>\\\"</span> <span class=\\\"token comment\\\">// 伪装图片</span>\\ndocument<span class=\\\"token punctuation\\\">.</span>body<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">appendChild</span><span class=\\\"token punctuation\\\">(</span>a<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<p>当下次别的用户访问时，这段代码被记载，一旦用户不小心点击到伪装图片，cookie就会被发送到我们的主机</p>\\n<p>从上面来看，防治XSS有两种主要方式</p>\\n<ol>\\n<li>\\n<p><strong>防止特殊的字符出现</strong>，这些字符主要是对于HTML文档有特殊意义的字符</p>\\n<p>客户端表单数据值类型检测和验证</p>\\n<p>服务器对用户提交的表单数据进行严格验证</p>\\n<p>主要是将相应的符号转换成HTML实体字符，像<code class=\\\"language-text\\\">&lt;</code>或者<code class=\\\"language-text\\\">&gt;</code>这些字符是不允许出现在文本中的，因为他们对于HTML文档来说有特殊意义。如果我们要在HTML文档中展示这些字符，应该使用它们的转义字符，例如<code class=\\\"language-text\\\">&lt;</code>转义字符为<code class=\\\"language-text\\\">&amp;lt;</code>，所以客户端或者服务器应该将提交上来的这些字符进行编码，或者过滤掉这些字符</p>\\n</li>\\n<li>\\n<p>让服务器将重要的cookie标记为<code class=\\\"language-text\\\">http-only</code>，也就是在response header中设置\\n<code class=\\\"language-text\\\">set-cookie: xxx;HttpOnly</code></p>\\n</li>\\n</ol>\\n<p>这里分别使用jQuery和原生JS实现对特殊字符的加密和解密</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// jQuery</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">htmlEncoderJq</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>str<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">$</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'&lt;div>'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">text</span><span class=\\\"token punctuation\\\">(</span>str<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">html</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">htmlDecoderJq</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>str<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token function\\\">$</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'&lt;div>'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">html</span><span class=\\\"token punctuation\\\">(</span>str<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">text</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\">// JS</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">htmlEncoderJs</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>str<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> div <span class=\\\"token operator\\\">=</span> document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createElement</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'div'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  div<span class=\\\"token punctuation\\\">.</span>textContent <span class=\\\"token operator\\\">=</span> str<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> div<span class=\\\"token punctuation\\\">.</span>innerHTML<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">htmlDecoderJs</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>str<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">let</span> div <span class=\\\"token operator\\\">=</span> document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createElement</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'div'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  div<span class=\\\"token punctuation\\\">.</span>innerHTML <span class=\\\"token operator\\\">=</span> str<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> div<span class=\\\"token punctuation\\\">.</span>textContent<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<h3 id=\\\"九、js中定义变量的var-let-const有什么区别\\\"><a href=\\\"#%E4%B9%9D%E3%80%81js%E4%B8%AD%E5%AE%9A%E4%B9%89%E5%8F%98%E9%87%8F%E7%9A%84var-let-const%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>九、JS中定义变量的var, let, const有什么区别</h3>\\n<p><code class=\\\"language-text\\\">var</code>是ES5中定义变量的方式，定义的变量只有全局作用域和函数作用域之分</p>\\n<p>ES6引入了<code class=\\\"language-text\\\">let</code>和<code class=\\\"language-text\\\">const</code>，前者定义的变量有了块级作用域的概念。后者表示定义一个常量，这里的常量用C语言来说，类似于C的指针，定义一个指针为常量，只是说这个指针不能指向别的内存地址(不能指向别的对象)，但是其自身内存地址的内容是可以访问和修改的</p>\\n<h3 id=\\\"十、数组去重的方法\\\"><a href=\\\"#%E5%8D%81%E3%80%81%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%E7%9A%84%E6%96%B9%E6%B3%95\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>十、数组去重的方法</h3>\\n<p>数组去重的方式网上太多了，总结起来就三大类，首先直接遍历，不使用数组的其他方法；然后可以使用数组的方法进行去重，或者使用ES6的Set和Map数据结构；最后扩展一下，考虑下其他数据类型的去重结果</p>\\n<ol>\\n<li>使用原始方法</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">distinct</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> resArr <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> arr<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> cur <span class=\\\"token operator\\\">=</span> arr<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> j <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> j <span class=\\\"token operator\\\">&lt;</span> resArr<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> j<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>cur <span class=\\\"token operator\\\">===</span> resArr<span class=\\\"token punctuation\\\">[</span>j<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token keyword\\\">break</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>j <span class=\\\"token operator\\\">===</span> resArr<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      resArr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>cur<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> resArr<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<ol start=\\\"2\\\">\\n<li>使用数组方法(splice)，会修改原数组</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">distinct</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> i <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span> i <span class=\\\"token operator\\\">&lt;</span> arr<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> i<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">var</span> cur <span class=\\\"token operator\\\">=</span> arr<span class=\\\"token punctuation\\\">[</span>i<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">for</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">var</span> j <span class=\\\"token operator\\\">=</span> i <span class=\\\"token operator\\\">+</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">;</span> j <span class=\\\"token operator\\\">&lt;</span> arr<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span> j<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>cur <span class=\\\"token operator\\\">===</span> arr<span class=\\\"token punctuation\\\">[</span>j<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        arr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">splice</span><span class=\\\"token punctuation\\\">(</span>j<span class=\\\"token operator\\\">--</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 数组长度动态变化，j记得减1</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> arr<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<ol start=\\\"3\\\">\\n<li>\\n<p>使用数组方法(indexOf+filter)</p>\\n<p>关于这两个方法也可以只用其一，搭配其他方法，或者自己写循环，但是原理差不多</p>\\n</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">distinct</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> arr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">filter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>v<span class=\\\"token punctuation\\\">,</span> k<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> arr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">indexOf</span><span class=\\\"token punctuation\\\">(</span>v<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">===</span>k<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<ol start=\\\"4\\\">\\n<li>\\n<p>使用数组方法(sort+filter)，会修改原数组</p>\\n<p>这两个方法也可以只选其一，搭配其他方法使用，或者自己写循环，但是原理差不多</p>\\n</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">distinct</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> arr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">sort</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">filter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>v<span class=\\\"token punctuation\\\">,</span> k<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> v<span class=\\\"token operator\\\">!==</span>arr<span class=\\\"token punctuation\\\">[</span>k<span class=\\\"token operator\\\">+</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<ol start=\\\"5\\\">\\n<li>ES6 Map(Map.prototype.set()返回原Map)</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">distinct</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">const</span> resMap <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> arr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">filter</span><span class=\\\"token punctuation\\\">(</span>v <span class=\\\"token operator\\\">=></span> <span class=\\\"token operator\\\">!</span>resMap<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">has</span><span class=\\\"token punctuation\\\">(</span>v<span class=\\\"token punctuation\\\">)</span><span class=\\\"token operator\\\">&amp;&amp;</span>resMap<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">set</span><span class=\\\"token punctuation\\\">(</span>v<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<ol start=\\\"6\\\">\\n<li>ES6 Set</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">const</span> <span class=\\\"token function-variable function\\\">distinct</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token operator\\\">...</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Set</span><span class=\\\"token punctuation\\\">(</span>arr<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span> <span class=\\\"token comment\\\">// 或者 return Array.from(new Set(arr));</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<ol start=\\\"7\\\">\\n<li>其他数据类型使用上述方法去重的检验结果</li>\\n</ol>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token keyword\\\">var</span> arr <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'1'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token string\\\">'1'</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">NaN</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token number\\\">NaN</span><span class=\\\"token punctuation\\\">,</span>undefined<span class=\\\"token punctuation\\\">,</span><span class=\\\"token keyword\\\">null</span><span class=\\\"token punctuation\\\">,</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">String</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>undefined<span class=\\\"token punctuation\\\">,</span><span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">String</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span></code></pre>\\n      </div>\\n<table>\\n<thead>\\n<tr>\\n<th>方法</th>\\n<th>结果</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>原始方法</td>\\n<td><code class=\\\"language-text\\\">NaN</code>\\n和\\n<code class=\\\"language-text\\\">String {&quot;1&quot;}</code>\\n不能去重</td>\\n</tr>\\n<tr>\\n<td>splice</td>\\n<td><code class=\\\"language-text\\\">NaN</code>\\n和\\n<code class=\\\"language-text\\\">String {&quot;1&quot;}</code>\\n不能去重，\\n<code class=\\\"language-text\\\">undefined</code>\\n为\\n<code class=\\\"language-text\\\">empty</code></td>\\n</tr>\\n<tr>\\n<td>filter+indexOf</td>\\n<td><code class=\\\"language-text\\\">String {&quot;1&quot;}</code>\\n不能去重，\\n<code class=\\\"language-text\\\">NaN</code>\\n全被过滤</td>\\n</tr>\\n<tr>\\n<td>filter+sort</td>\\n<td><code class=\\\"language-text\\\">NaN</code>\\n不能去重，\\n<code class=\\\"language-text\\\">undefined</code>\\n全被过滤，\\n<code class=\\\"language-text\\\">1, String {&quot;1&quot;}, &quot;1&quot;</code>\\n无法正确判断</td>\\n</tr>\\n<tr>\\n<td>Map</td>\\n<td><code class=\\\"language-text\\\">String {&quot;1&quot;}</code>\\n不能去重</td>\\n</tr>\\n<tr>\\n<td>Set</td>\\n<td><code class=\\\"language-text\\\">String {&quot;1&quot;}</code>\\n不能去重</td>\\n</tr>\\n</tbody>\\n</table>\\n<p>   以上的结果只要关注几个点</p>\\n<ol>\\n<li>\\n<p><code class=\\\"language-text\\\">new String {&quot;1&quot;}</code>和<code class=\\\"language-text\\\">new String {&quot;1&quot;}</code>并不是同一个对象，如果非要把他们当成同一对象，我们可以使用对象的<code class=\\\"language-text\\\">hasOwnProperty(typeof arr[i] + arr[i])</code>来判断，如果没有就新增一个key，但是我还是认为上面的两个是不同的对象实例</p>\\n</li>\\n<li>\\n<p>要注意<code class=\\\"language-text\\\">console.log(NaN===NaN) // false</code>，所以造成有些方法不能去重，有些筛选机制直接过滤，但是在Map和Set中，即使这两个不相等，但是会把他们当成相同的东西看待</p>\\n</li>\\n<li>\\n<p>最后就是sort方法，MDN给出的解释非常详细</p>\\n<blockquote>\\n<p>The <strong><code class=\\\"language-text\\\">sort()</code></strong> method sorts the elements of an array <em>in place</em> and returns the array. The sort is not necessarily stable. The default sort order is according to string Unicode code points.</p>\\n</blockquote>\\n<p>  <code class=\\\"language-text\\\">sort()</code>对于<code class=\\\"language-text\\\">1, String{&quot;1&quot;}, &quot;1&quot;</code>来说是一视同仁的，因此在此基础上使用<code class=\\\"language-text\\\">filter()</code>判断时和三者在原数组中的顺序有关。不能准确去重</p>\\n</li>\\n</ol>\\n<h3 id=\\\"十一、dom节点的深度遍历和广度遍历\\\"><a href=\\\"#%E5%8D%81%E4%B8%80%E3%80%81dom%E8%8A%82%E7%82%B9%E7%9A%84%E6%B7%B1%E5%BA%A6%E9%81%8D%E5%8E%86%E5%92%8C%E5%B9%BF%E5%BA%A6%E9%81%8D%E5%8E%86\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>十一、DOM节点的深度遍历和广度遍历</h3>\\n<p>广度遍历（BFS）比较简单，类似于二叉树的层次遍历，使用队列模拟当前一层，每出队列一个节点，则将其加入到最终结果数组里，并且将其的子节点全部入队，直到队列为空</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// BFS</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">travelsalBFS</span><span class=\\\"token punctuation\\\">(</span>root<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> tempArr <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">var</span> resArr <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  tempArr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>root<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>tempArr<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">let</span> len <span class=\\\"token operator\\\">=</span> tempArr<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">while</span> <span class=\\\"token punctuation\\\">(</span>len<span class=\\\"token operator\\\">--</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">let</span> tempNode <span class=\\\"token operator\\\">=</span> tempArr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">shift</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      resArr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>tempNode<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span>tempNode<span class=\\\"token punctuation\\\">.</span>children<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        tempArr <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token operator\\\">...</span>tempArr<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>Array<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">(</span>tempNode<span class=\\\"token punctuation\\\">.</span>children<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> resArr<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>当然，我们也可以不出队列，只入队列，使用<code class=\\\"language-text\\\">index</code>记录下当前访问到的节点，每访问完就将其子节点全部入队，直到全部节点都被访问</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// BFS 不使用临时array</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">travelsalBFS2</span><span class=\\\"token punctuation\\\">(</span>root<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> resArr <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  resArr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>root<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">var</span> index<span class=\\\"token operator\\\">=</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">while</span><span class=\\\"token punctuation\\\">(</span>resArr<span class=\\\"token punctuation\\\">[</span>index<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    resArr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">...</span>Array<span class=\\\"token punctuation\\\">.</span><span class=\\\"token keyword\\\">from</span><span class=\\\"token punctuation\\\">(</span>resArr<span class=\\\"token punctuation\\\">[</span>index<span class=\\\"token operator\\\">++</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">.</span>children<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token keyword\\\">return</span> resArr<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>深度遍历稍微复杂一点，我想到的是从根节点开始，每次访问其第一个子节点，直到某个节点没有子节点，此时将该元素从临时数组<code class=\\\"language-text\\\">pop</code>出来，访问其兄弟节点（如果访问不到则继续<code class=\\\"language-text\\\">pop</code>），直到访问到一个存在的兄弟节点，并把它作为当前节点，重复步骤。那么何时结束呢？刚才说到访问不到兄弟节点会一直<code class=\\\"language-text\\\">pop</code>，当把第一个根节点pop出来的时候，也就访问完毕了，可以返回结果数组</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"javascript\\\">\\n      <pre class=\\\"language-javascript\\\"><code class=\\\"language-javascript\\\"><span class=\\\"token comment\\\">// DFS</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">travelsalDFS</span><span class=\\\"token punctuation\\\">(</span>root<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">var</span> tempArr <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>root<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">var</span> resArr <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span>root<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">var</span> curEle <span class=\\\"token operator\\\">=</span> root<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">while</span><span class=\\\"token punctuation\\\">(</span>tempArr<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">||</span> curEle<span class=\\\"token punctuation\\\">.</span>children<span class=\\\"token punctuation\\\">.</span>length <span class=\\\"token operator\\\">!==</span> <span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span>curEle<span class=\\\"token punctuation\\\">.</span>children<span class=\\\"token punctuation\\\">.</span>length<span class=\\\"token operator\\\">===</span><span class=\\\"token number\\\">0</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      curEle <span class=\\\"token operator\\\">=</span> tempArr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pop</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">while</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>curEle<span class=\\\"token punctuation\\\">.</span>nextElementSibling<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n        curEle <span class=\\\"token operator\\\">=</span> tempArr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">pop</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token comment\\\">// 这个地方，如果回到root，则遍历完毕！</span>\\n        <span class=\\\"token keyword\\\">if</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span>curEle <span class=\\\"token operator\\\">||</span> curEle <span class=\\\"token operator\\\">===</span> root<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n          <span class=\\\"token keyword\\\">return</span> resArr<span class=\\\"token punctuation\\\">;</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token punctuation\\\">}</span>\\n      curEle <span class=\\\"token operator\\\">=</span> curEle<span class=\\\"token punctuation\\\">.</span>nextElementSibling<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">else</span> <span class=\\\"token punctuation\\\">{</span>\\n      curEle <span class=\\\"token operator\\\">=</span> curEle<span class=\\\"token punctuation\\\">.</span>firstElementChild<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token comment\\\">// 访问到的节点都要存起来，不同的是临时数组会pop出去，从而向上返回</span>\\n    resArr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>curEle<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    tempArr<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">push</span><span class=\\\"token punctuation\\\">(</span>curEle<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span></code></pre>\\n      </div>\\n<p>关于节点访问，我这里为了简单起见都称作节点了。但是要记住DOM元素和DOM节点是不同的，准确来说以上的应该都是DOM元素，因为DOM节点还包括了文本节点，注释节点等等</p>\\n<p>要注意<code class=\\\"language-text\\\">children</code>和<code class=\\\"language-text\\\">childNodes</code>，<code class=\\\"language-text\\\">firstElementChild</code>和<code class=\\\"language-text\\\">firstChild</code>，<code class=\\\"language-text\\\">nextElementSibling</code>和<code class=\\\"language-text\\\">nextSibling</code>的区别，前者访问到的是元素，例如<code class=\\\"language-text\\\">children</code>返回的是<code class=\\\"language-text\\\">HTML Collection</code>。后者访问到的是节点，例如<code class=\\\"language-text\\\">childNodes</code>返回的是<code class=\\\"language-text\\\">NodeList</code>，这两种类型都是类数组类型，可以使用<code class=\\\"language-text\\\">Array.from</code>转换成数组</p>\",\"frontmatter\":{\"title\":\"面试的那些题-JS篇\",\"date\":\"August 29, 2018\",\"excerpt\":\"最近想复习总结下面试中遇到的所有面试题，以及自己觉得可能出现的面试题，又或者是我觉得不错的需要掌握的知识。这是Master the FED Interviews系列的第一篇：关于JavaScript\",\"contents\":[{\"text\":\"前言\",\"subContents\":null},{\"text\":\"一、null和undefined的区别\",\"subContents\":null},{\"text\":\"二、js中有哪些数据类型\",\"subContents\":null},{\"text\":\"三、array检测有几种方法\",\"subContents\":null},{\"text\":\"四、对象属性遍历的方法\",\"subContents\":null},{\"text\":\"五、javascript中0102为什么不等于03\",\"subContents\":null},{\"text\":\"六、mouse-leave和mouse-out事件的区别\",\"subContents\":null},{\"text\":\"七、一个区域内的多张图片，怎么判断他们全部加载完成\",\"subContents\":null},{\"text\":\"八、xss是什么，怎么防止xss\",\"subContents\":null},{\"text\":\"九、js中定义变量的var-let-const有什么区别\",\"subContents\":null},{\"text\":\"十、数组去重的方法\",\"subContents\":null},{\"text\":\"十一、dom节点的深度遍历和广度遍历\",\"subContents\":null}]}}},\"pathContext\":{\"slug\":\"/learning/2018/08/29/Master-the-FED-Interviews-JavaScript/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/learning-2018-08-29-master-the-fed-interviews-java-script.json\n// module id = 279\n// module chunks = 117252040687834"],"sourceRoot":""}